<?xml version="1.0" encoding="UTF-8" standalone="no"?><xs:schema xmlns="http://www.tmaxsoft.com/xml/ns/jeus" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus" version="8.0">

    <xs:include schemaLocation="jeus-common.xsd"/>
    <xs:include schemaLocation="jeus-security.xsd"/>
    <xs:include schemaLocation="jeus-session-domain.xsd"/>
    <xs:include schemaLocation="ejb-engine.xsd"/>
    <xs:include schemaLocation="jms-engine.xsd"/>
    <xs:include schemaLocation="web-engine.xsd"/>

    <xs:element name="domain" type="domainType">
        <xs:annotation>
            <xs:documentation><![CDATA[
				[Description]: JEUS의 최대 관리 단위인 도메인 레벨의 설정을 나타낸다.
				[Label]: Domain
			]]></xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="domainType">
        <xs:sequence>
            <xs:element minOccurs="0" name="description" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 설정 변경사항에 대한 내용을 적을 수 있다.
                        [Advanced]: 설정변경 화면에서 보여주지 않도록 해야 합니다.
						[Label]: Description
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="production-mode" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인이 운영모드로 운영될지, 개발모드로 운영될지 여부를 지정한다.
                         이 값을 변경한 후에는 도메인 전체를 재기동 해주어야 한다.
                        [Advanced]: 설정변경 화면에서 보여주지 않도록 해야 합니다.
						[Label]: Production Mode
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="1" name="id" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인을 구성할 때 도메인의 정체성을 나타내는 유일한 ID를 지정한다.
                        같은 서브넷에 TEST 도메인과 운영 도메인을 똑같이 구성한 경우에 도메인 이름은 동일하게 하더라도 ID는 다르게 지정한다.
                        [Basic]
						[Label]: Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="1" name="security-manager" type="security-managerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JEUS Security 정보 관리에 대한 설명이다.
                        하나의 도메인 내의 공통 Security 정보를 관리할 때 설정한다.
                        [Advanced]: 고급선택사항
						[Label]: Security Manager
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="admin-server-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버들 중 Managed Server들을 관리 및 모니터링하는 DAS(Domain Administration Server)의 이름을 설정한다.
						[Label]: Admin Server Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="domain-log-home" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인의 log home을 지정한다. 각 서버의 log home이 없으면 이 log home을 공통으로 적용하게 된다.
						[Label]: Domain Log Home
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="domain-backup" type="domain-backupType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인을 백업하기 위해 백업파일을 만드는 데 필요한 정책을 설정한다.
                        [Advanced]: 고급선택사항
						[Label]: Domain Backup
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="system-clustering-framework" type="system-clustering-frameworkType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 또는 클러스터 내에서 서버들 간에 통신할 때 필요한 정보를 설정한다.
                        [Advanced]: 도메인이 서브넷 안에서 구성되는 경우에는 특별한 설정이 필요없다.
						[Label]: System Clustering Framework
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="servers" type="serversType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 JEUS 서버를 구성할 때, 여러 서버에 대한 설정을 지정한다.
						[Label]: Servers
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="clusters" type="clustersType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 JEUS 클러스터를 구성할 때, 여러 클러스터에 대한 설정을 지정한다.
						[Label]: Clusters
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="server-templates" type="serverTemplatesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 JEUS 서버를 구성할 때, 여러 서버 템플릿에 대한 설정을 지정한다.
						[Label]: Server Templates
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" maxOccurs="1" name="session-cluster" type="session-clusterType" >
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS의 세션 클러스터링에 관한 설정이다.
                        Servlet에서 사용하는 HTTP 세션 클러스터링을 위한 서비스이다.
                        세션 클러스터링을 지원하게 되며 세션 클러스터링에 참여하는 다른 서버의 세션 서버와 통신하여
                    장애가 발생한 경우에도 세션이 유지될 수 있도록 한다.
                    		[Label]: Session Cluster
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="application-repositories" type="application-repositoryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션 파일을 저장할 디렉터리를 설정한다.
                        여기에 위치한 애플리케이션들은 도메인으로 애플리케이션을 Install하지 않아도 자동으로 INSTALLED 상태로 인식된다.
                        해당 디렉터리에는 애플리케이션 파일을 동적으로 추가 및 삭제할 수 있다.
                        [Dynamic]: 동적으로 Application Repository를 추가 및 삭제할 수 있다.
						[Label]: Application Repositories
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="deployed-applications" type="deployed-applicationsType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 서비스될 애플리케이션에 대한 Deploy 설정을 지정한다.
						[Label]: Deployed Applications
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="deployed-libraries" type="deployed-librariesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 서비스될 라이브러리에 대한 Deploy 설정을 지정한다.
						[Label]: Deployed Libraries
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element maxOccurs="unbounded" minOccurs="0" name="lifecycle-invocation" type="lifecycle-invocationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인의 모든 서버에 각종 Lifecycle 이벤트를 지정할 수 있다.
                        [Advanced]: 고급선택사항
						[Label]: Lifecycle Invocation
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="resources" type="resourcesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 사용될 여러 리소스에 대한 설정을 지정한다.
                        JEUS와 연동되는 외부 리소스들에 대한 정보를 포함하고 있으며 대표적으로 DB 설정이 지정된다.
						[Label]: Resources
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element default="true" minOccurs="0" name="enable-webadmin" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: WebAdmin 사용 여부를 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]: 고급선택사항
						[Label]: Enable Webadmin
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element default="false" minOccurs="0" name="enable-json-command" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JsonCommand 사용 여부를 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]: 고급선택사항
						[Label]: Enable Json Command
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element default="false" minOccurs="0" name="enable-to-resynchronize-applications" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: MS(Managed Server)가 INDEPENDENT Mode로 동작중인 상황에서
                        DAS가 부팅되어 JOIN event를 받은 경우, application에 대한 동기화를 진행할지 여부를 결정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]: 고급선택사항
						[Label]: Enable To Resynchronize Applications
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute default="8.0" name="version" type="jeus-versionType" use="optional"/>
    </xs:complexType>

    <xs:complexType name="system-clustering-frameworkType">
        <xs:sequence>
            <xs:element minOccurs="0" name="heartbeat-address" type="xs:token" default="224.0.0.1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Heartbeating에 사용되는 Multicast 주소로, 예약되지 않은 올바른 주소를 설정한다.
                        224.0.0.0 ~ 239.255.255.255 사이의 주소로서, 예약되지 않은 올바른 주소를 할당하기 위해서는
                        "http://www.iana.org/assignments/multicast-addresses"의 자세한 내용을 확인하는 것을 권장한다.
						[Label]: Heartbeat Address
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="heartbeat-port" type="positiveIntType" default="12488">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Heartbeating에 사용되는 Multicast의 포트 번호를 설정한다.
						[Label]: Heartbeat Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="use-virtual-multicast" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 또는 클러스터 내에서 특정 서버가 서브넷을 넘어선 위치, 즉 Multicast가 불가능한 네트워크 환경에 존재하더라도
                        TCP 프로토콜을 통해 가상적인 Multicast를 가능하도록 하는 기능인 Virtual Multicast를 사용하도록 하는 설정이다.
                        이 때 최소한 각 MS들은 DAS의 주소를 알 수 있어야 한다. DAS의 Base Listener 설정에 주소를 명시하는 방법과 MS를 기동할 때
                        -dasurl 옵션을 주는 방법이 있다.
                        [Basic]: 도메인 내의 서버들 중 일부라도 그 위치가 서브넷을 벗어 나는 경우에는 반드시 설정해야 한다.
						[Label]: Use Virtual Multicast
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="leader-discovery-timeout" type="positiveLongType" default="3000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 최초에 기동하여 기존에 형성되어있는 Group의 Leader를 찾아내기까지 허용되는 최대 시간을 설정한다.
                        설정된 시간이 지나도 Leader를 찾지 못한다면 자신이 Leader가 되었다고 선언한다. 이 시간은 새 Leader 선출에도 이용된다.
                        [Value Description]: 단위는 밀리세컨드이며 0보다 큰 값을 설정해야 한다.
						[Label]: Leader Discovery Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="failure-detection-timeout" type="positiveLongType" default="3000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 자신의 Health 상태를 다른 Peer들에게 전달하는 시간 간격 및 다른 Peer들의 Health 상태를 확인하는
						시간 간격으로 사용되는 값이다.
                        [Value Description]: 단위는 밀리세컨드이며 0보다 큰 값을 설정해야 한다.
						[Label]: Failure Detection Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="failure-verification-timeout" type="positiveLongType" default="3000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Indoubt Peer(suspected member)가 Failure 상태인지 확정하는 체크 주기를 설정한다.
                        [Value Description]: 단위는 밀리세컨드이며 0보다 큰 값을 설정해야 한다.
						[Label]: Failure Verification Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="max-thread-pool-size" type="positiveIntType" default="50">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: System Clustering Framework에서 사용하는 Thread pool 크기의 최대치를 설정한다.
						[Label]: Max Thread Pool Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="min-thread-pool-size" type="nonNegativeIntType" default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: System Clustering Framework에서 사용하는 Thread pool 크기의 최소치를 설정한다.
						[Label]: Min Thread Pool Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="domain-backupType">
        <xs:sequence>
            <xs:sequence>
                <xs:element minOccurs="0" name="backup-on-boot" type="xs:boolean" default="false">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
							[Description]: DAS(Domain Administration Server)를 부팅할 때 도메인 백업파일을 생성할지 여부를 설정한다.
                    [Dynamic]: 동적 변경이 가능하다.
							[Label]: Backup On Boot
						]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:element minOccurs="0" name="backup-dir" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 백업파일을 생성할 디렉터리를 설정한다.
                    [Dynamic]: 동적 변경이 가능하다.
						[Label]: Backup Dir
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="node-name" type="xs:string">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Backup 파일을 복사할 노드를 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
						[Label]: Node Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serversType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="server" type="serverType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 사용할 JEUS 서버의 세부 설정을 정의한다.
                        [Dynamic]: 동적으로 서버를 추가한 후 서버를 시작할 수 있다.
                              추가한 서버가 DAS와 다른 노드에 있다면 Node Name을 설정해야 DAS가 시작할 수 있고,
                           설정하지 않으면 직접 로컬에서 시작해야 한다.
                        동적으로 서버를 삭제할 경우에는 Running 중인 서버가 아닌 Shutdown 상태의 서버만 삭제할 수 있으므로
                        Shutdown 후 서버를 삭제한다.
						[Label]: Server
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="clustersType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="cluster" type="clusterType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터 구성을 위한 세부 설정을 한다.
						[Label]: Cluster
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serverTemplatesType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="server-template" type="serverTemplateType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						<!-- Fixme -->
                        [Description]: 도메인 내에서 사용할 JEUS 서버의 세부 설정을 정의한다.
                        [Dynamic]: 동적으로 서버를 추가한 후 서버를 시작할 수 있다.
                              추가한 서버가 DAS와 다른 노드에 있다면 Node Name을 설정해야 DAS가 시작할 수 있고,
                           설정하지 않으면 직접 로컬에서 시작해야 한다.
                        동적으로 서버를 삭제할 경우에는 Running 중인 서버가 아닌 Shutdown 상태의 서버만 삭제할 수 있으므로
                        Shutdown 후 서버를 삭제한다.
						[Label]: Server Template
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="application-repositoryType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="application-repository" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Dynamic]: Application Repository의 추가 및 삭제가 가능하다.
                        [Description]: Application Archive 파일들을 저장할 디렉터리를 지정한다.
                        DAS(Domain Administration Server)가 존재하는 머신에서 접근가능한 절대 경로여야 한다.
                        수동으로 애플리케이션을 DAS에 위치시키려면 반드시 설정해야 한다.
                        Install명령을 통해 DAS로 업로드된 애플리케이션 파일은
                        도메인 디렉터리 내에 INSTALL_HOME에 위치하는 것과 달리 여기에 위치한 파일은 INSTALL_HOME으로 복사되지 않는다.
                        디렉터리 모드의 애플리케이션을 Deploy하려면 여기에 Application Repository를 설정하고,
                        해당 Exploded 모듈을 지정한 Application Repository에 위치시켜야 한다.
						[Label]: Application Repository
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deployed-applicationsType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="deployed-application" type="deployed-applicationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 서비스될 애플리케이션의 Deploy 관련 세부 설정을 정의한다.
                        서버가 기동될 때 Deploy되는 애플리케이션의 설정이다.
						[Label]: Deployed Application
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="resourcesType">
        <xs:sequence>
            <xs:element minOccurs="0" name="data-source" type="data-sourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에서 사용할 수 있는 데이터소스를 정의한다.
						[Label]: Data Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="mail-source" type="mail-sourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트 애플리케이션에서 메일을 보낼 때 사용되어질
                        여러 SMTP 호스트를 설정한다.
                        [Advanced]:
						[Label]: Mail Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="url-source" type="url-sourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트가 표준 JNDI lookup 방식으로 URL 리소스에 접근
                        가능하도록 하기 위해 Naming Server의 JNDI Name에 URL 주소를 바인드하는 데 사용된다.
                        [Advanced]:
						[Label]: Url Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-bridge" type="message-bridgeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 여러 JMS Vendor의 Destination 사이에 Message bridge를 설정하는 데 사용된다.
                        [Non-Dynamic]: 동적으로 변경이 불가능하다.
						[Label]: Message Bridge
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="custom-resource" type="customResourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Dynamic]: Custom Resource의 추가 및 삭제는 가능하지만, 삭제는 graceful하게 되지 않는다.
                        [Description]: 일반적으로 사용되는 리소스를 등록한다.
                        [Advanced]:
						[Label]: Custom Resource
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="external-resource" type="external-resourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 사용될 외부 리소스에 대한 설정을 지정한다.
                        JEUS와 연동되는 WebT 나 jTmax, 또는 InfiniteCache에 대한 설정을 지정한다.
						[Label]: External Resource
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="external-source" type="external-sourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 외부 리소스를 설정할 때 사용한다. 특히 리소스 어댑터를 설정할 수 있다.
                        [Advanced]:
						[Label]: External Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jaxr-source" type="jaxr-sourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JAXR 애플리케이션에서 사용할 수 있는 XML Registry를 정의한다.
						[Label]: Jaxr Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="managed-executor-service" type="managed-executor-serviceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에서 사용할 수 있는 ManagedExecutorService를 정의한다.
						Task 가 worker thread 에서 실행될 때도 Contextual Information (Security, Transaction, Execution Context 등) 을 전달받도록 해준다.
						[Label]: Managed Executor Service
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="managed-scheduled-executor-service" type="managed-scheduled-executor-serviceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에서 사용할 수 있는 ManagedScheduledExecutorService를 정의한다.
						Task 가 worker thread 에서 실행될 때도 Contextual Information (Security, Transaction, ExecutionContext 등) 을 전달받도록 해준다.
						선택 사항으로 javax.enterprise.concurrent.Trigger 의 구현체를 Task Submit할 때 같이 넘겨주면 Task 실행 시점를 제어할 수 있다.
						[Label]: Managed Scheduled Executor Service
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="context-service" type="context-serviceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에서 사용할 수 있는 ContextService를 정의한다.
						Task 가 Java SE 에서 제공되는 Concurrency Utilities (e.g., ExecutorService...) 에서 실행되더라도 Task 의 Context를 유지해준다.
                        정의된 Task 를 ContextService 를 통해 제공되는 Proxy 객체로 변환하여 실행하여야 한다.
						[Label]: Context Service
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="managed-thread-factory" type="managed-thread-factoryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에서 사용할 수 있는 ManagedThreadFactory를 정의한다.
						Task 가 Java SE 에서 제공되는 Concurrency Utilities (e.g., ExecutorService...) 에서 실행되더라도 Task 의 Context를 유지해준다.
						Concurrency Utilities 를 이용할 때 ManagedThreadFactory 를 이용하여 스레드를 생성해야 한다.
						(e.g., java.util.ThreadPoolExecutor 의 생성자 파라미터로 ThreadFactory를 전달 가능)
						[Label]: Managed Thread Factory
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serverType">
        <!-- ServerType 에 추가되는 element 가 ServerTemplateType 에도 공통 적용된다면 -->
        <!-- jeus.descriptor.easycluster.FakeServerType 에 해당 field에 대한 get/set/isSet methods 를 override 하도록 한다. -->

        <!-- server-specific-group = ServerType에만 있는 설정 + server-common-group -->
        <!-- server-common-group = ServerType, ServerTemplateType 에 공통 적용되는 설정들 -->
        <!-- server-identical-group = ServerType, ServerTemplateType 에 공통 적용되며 cluster 에도 공통 적용되는 설정들 -->
        <xs:sequence>
            <xs:group ref="server-specific-group"/>
            <xs:group ref="server-identical-group"/>
            <xs:element maxOccurs="1" minOccurs="0" default="false" name="auto-generated" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 이 서버가 자동으로 생성되었는지 여부가 설정된다. true일 경우 해당 서버가 자동으로 삭제될 수 있으므로,
                        이 항목은 설정하지 않도록 한다.
						[Label]: Auto Generated
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" default="false" name="is-cloud-server" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버가 클라우드 용의 서버로 생성되었는지를 나타낸다. Template을 이용하여 서버가 자동 생성된 경우에 참으로 되며,
						 서버가 내려가게 되면 설정에서 서버 정보가 사라지게 된다.
						[Label]: Cloud server
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="clusterType">
        <xs:sequence>
            <xs:group ref="cluster-specific-group"/>
            <xs:group ref="server-identical-group"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="dynamicServersType">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="1" name="server-count" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터에 참여할 서버들의 개수를 설정한다.
						[Label]: Server Count
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="server-name-prefix" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버 이름으로 사용될 접두어를 설정한다. 서버개수에 따라 뒤에 번호가 붙는다.
                        prefix를 지정하지 않을 경우 cluster 이름을 이용하여, cluster 이름 + "_server_" + 번호 로 서버이름이 생성된다.
						[Label]: Server Name Prefix
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="node-names" type="node-namesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버들을 실행시킬 노드들을 설정한다. 각 노드에 round-robin 방식으로 다이나믹 서버들이 할당된다.
						[Label]: Node Names
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <!-- Listener ports -->
            <xs:element default="9736" maxOccurs="1" minOccurs="0" name="base-listen-port" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 통합 Listener의 포트를 설정한다. 기본값은 9736이다.
						[Label]: Base Listen Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="8088" maxOccurs="1" minOccurs="0" name="http-listen-port" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Http Listener의 포트를 설정한다. 기본값은 8088이다.
						[Label]: Http Listen Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="9741" maxOccurs="1" minOccurs="0" name="jms-listen-port" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JMS 포트 Listener의 포트를 설정한다. 기본값은 9741이다.
						[Label]: Jms Listen Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="100" maxOccurs="1" minOccurs="0" name="listen-port-step" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 한 노드에 여러개의 다이나믹 서버가 존재할 경우 listen port 를 구분하기 위해 설정한다.
                    한 노도의 첫번째 다이나믹 서버의 listen port가 9736이고, step이 100인 경우 두번째 다이나믹 서버의 listen port는 9836이 된다.
                    Base port, http port, jms port에 공통적으로 적용된다.
						[Label]: Listen Port Step
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="1" name="server-template-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터 구성 서버들에 동일하게 적용할 서버 템플릿의 이름을 지정한다.
						[Label]: Server Template Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="serverTemplateType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 서버 템플릿의 이름이다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:group ref="server-common-group"/>
            <xs:group ref="server-identical-group"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="node-namesType">
        <xs:choice>
            <xs:element maxOccurs="unbounded" minOccurs="1" name="node-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: nodes.xml에 정의된 노드들 중 서버를 실행시키고자 하는 노드의 이름을 적는다. 적힌 순서대로 round-robin으로 할당된다.
						지정되지 않은 경우에는 모든 노드를 사용한다.
						[Label]: Node Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <!-- 여기서의 identical 은 server와 cluster의 공통 설정 -->
    <xs:group name="server-identical-group">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="lifecycle-invocation" type="lifecycle-invocationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버의 각종 Lifecycle 이벤트에 호출할 메소드를 지정할 수 있다.
                        [Advanced]: 고급선택사항
				[Label]: Lifecycle Invocation
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="class-ftp" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: EJB 2.x 클라이언트가 Dynamic Proxy 방식이 아닌 Stub 방식을 이용하여 호출하기를 원하면,
                        클라이언트에 Stub이 존재해야 한다. 이 경우에 클래스 FTP 서비스가 활성화되어 있다면, EJB Stub을 FTP를 사용해서 클라이언트로 전송해준다.
                        이 서비스가 비활성화되어 있다면 직접 해당 파일을 복사해야 한다.
                        기본적으로 Dynamic Proxy를 사용하기 때문에 이 서비스는 기본으로 비활성화되어 있다.
                        [Dynamic]: 동적으로 클래스 FTP를 활성화/비활성화 시킬 수 있다.
                        [Advanced]: 고급선택사항
				[Label]: Class Ftp
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="enable-interop" type="enable-interopType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: RMI/IIOP 상호 운영성(interoperability)에 대해서 설정한다.
                        이 설정은 상호 운영을 활성화시킨다. EJB RMI/IIOP를 사용한다면 반드시 설정해야 한다.
                        이 경우 ORB에 CSI Listener와 OTS Listener가 구동되며, 이는 보안(예 : "principal")과
                        트랜잭션(예: GTID)을 포함하는 연동을 가능하게 한다. SSL이 구성되어 있으면 SSL도 활성화된다.
                        [Advanced]: 고급선택사항
				[Label]: Enable Interop
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="use-MEJB" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: J2EE Management 스펙에서 제시하는 MEJB를 사용할 것인지를 설정한다. 사용하지
                        않는다면 MEJB를 Deploy하지 않는다.
                        [Dynamic]: MEJB 사용을 동적으로 활성화/비활성화 시킬 수 있다.
                        [Advanced]: 고급선택사항
				[Label]: Use MEJB
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="data-sources" type="data-sourcesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버 혹은 클러스터에서 유효한 데이터소스를 지정한다.
                        [Advanced]: 고급선택사항
                        [Dynamic]: 서버 혹은 클러스터에서 유효한 데이터소스를 동적으로 추가 / 삭제할 수 있다.
				[Label]: Data Sources
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jms-resource" type="jms-resourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 클러스터 내에서 공통으로 사용할 JMS 리소스에 대한 설정이다.
				[Label]: Jms Resource
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="res-ref" type="res-refType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 해당 서버의 JNDI에 등록할 Resource Reference들이다.
                        [Advanced]: 고급선택사항
				[Label]: Res Ref
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="custom-resource-refs" type="resource-refsType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버 혹은 클러스터에서 유효한 리소스를 지정한다.
                        [Advanced]: 고급선택사항
				[Label]: Custom Resource Refs
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="external-resource-refs" type="resource-refsType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버 혹은 클러스터에서 유효한 리소스를 지정한다.
                        [Advanced]: 고급선택사항
				[Label]: External Resource Refs
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:group name="server-specific-group">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[ID]: ID
                        [Description]: 서버의 이름이다.
				[Label]: Name
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="node-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버가 속하는 노드의 이름을 설정한다. 노드에는 머신 정보, 호스트 정보 등이 포함된다.
                        [Basic]: 노드 매니저를 사용하려면 반드시 설정해야 한다. 노드 매니저를 사용하는 것을 권장한다.
                        [Non-Dynamic]: 서버가 변경된 노드에서 부팅이 되야 동적 반영이 되었다고 말할 수 있기 때문에 동적 변경이 불가능하다.
                        서버가 부팅되어 있는 동안은 수정할 수 없다.
				[Label]: Node Name
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="listeners" type="listenersType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버의 JEUS 시스템이 사용하는 Socket Listener 및 Socket Connection Request 처리에 필요한 각종 속성을 지정한다.
				[Label]: Listeners
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:group ref="server-common-group"/>
        </xs:sequence>
    </xs:group>

    <!-- 여기서의 common 은 일반 server와 server template의 공통 설정 -->
    <xs:group name="server-common-group">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="0" name="group" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버 관리를 위한 그룹을 설정한다. WebAdmin에서 그룹별로 서버를 관리할 수 있다.
                        [Advanced]: 고급선택사항
                        [Dynamic]:
				[Label]: Group
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jvm-config" type="jvmConfigType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버의 JVM과 관련된 옵션을 지정한다.
                        [Basic]: JVM 옵션 설정을 위해 필요하다. JEUS에서 제공하는 관리 도구(ant task, jeusadmin, WebAdmin)를 이용하여 도메인 또는 서버를 생성하면 Permgen 및 Heap Memory가 기본적으로 설정된다.
				[Label]: Jvm Config
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="user-interceptor" type="userInterceptorType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: JEUS에 User Specific한 기능을 추가한다.
                        [Advanced]: 고급선택사항
				[Label]: User Interceptor
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="engine-init-on-startup" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에 사용 설정된 웹, EJB, JMS 엔진 등의 초기화 시점을 설정한다.
                        [Value Description]: true 사용 설정된 엔진이 필요할 때에 엔진을 초기화한다.
                                             false 사용 설정된 엔진을 서버가 기동될 때 초기화한다.
				[Label]: Engine Init On Startup
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="use-web-engine" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에 웹 엔진을 사용할지 여부를 설정한다.
				[Label]: Use Web Engine
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="use-ejb-engine" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에 EJB 엔진을 사용할지 여부를 설정한다.
				[Label]: Use Ejb Engine
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="use-jms-engine" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에 JMS 엔진을 사용할지 여부를 설정한다.
				[Label]: Use Jms Engine
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="web-engine" type="web-containerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 웹 엔진은 J2EE Web/Servlet 애플리케이션이 작동하기 위한 환경을 제공한다. J2EE 스펙에서의
                        웹 컨테이너에 대응하는 기능이다. 서버가 부팅될 때 실행되며, 하나의 서버에서는 하나의 웹 엔진만 지원한다.
				[Label]: Web Engine
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="ejb-engine" type="ejb-engineType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: EJB 엔진은 J2EE EJB 애플리케이션이 작동하기 위한 환경을 제공한다. J2EE 스펙에서의
                        EJB 컨테이너에 대응하는 기능이다. 서버가 부팅될 때 실행되며, 하나의 서버에서는 하나의 EJB 엔진만 지원한다.
				[Label]: Ejb Engine
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jms-engine" type="jms-serverType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: JMS 엔진은 해당 서버에서 JMS 서버를 사용하기 위한 환경을 제공한다.
                        서버가 부팅될 때 실행되며, 하나의 서버에서는 하나의 JMS 엔진만 지원한다.
				[Label]: Jms Engine
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="log-home" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: JEUS Server에서 만드는 log의 기본 경로를 지정한다. 해당 경로가 설정되어 있어도 logger의 file handler에 설정된 path가 절대 경로일 경우에는 그 경로가 우선시 된다.
                        기본 log뿐만 아니라 rotation된 backup log가 생성되는 경로에도 똑같이 적용이 된다.
				[Label]: Log Home
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element maxOccurs="unbounded" minOccurs="0" name="system-logging" type="system-loggingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Dynamic]: Logging의 추가 및 삭제가 가능하다
                        [Description]: 서버에서 사용할 Logger에 대한 설정이다.
                        [Basic]: Logger 설정은 기본적으로 보여야 한다.
				[Label]: System Logging
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="user-logging" type="system-loggingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: jeus.util.UserLogger 클래스를 사용해서 생성한 로그를 어떻게 출력할 것인지 설정한다.
                        [Advanced]: 고급선택사항
				[Label]: User Logging
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="log-stdout-to-raw-format" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Dynamic]: 동적변경가능
                        [Description]: Standard out/err를 출력할 때 그대로(raw format) 출력할 지 로그 형식으로 출력할지의 여부를 지정한다.
                        기본 Formatter를 사용할 경우에만 적용되며, 로그로 출력할 경우 [STDOUT] prefix가 붙어서 출력된다.
                        기본값은 true로 Standard out/err를 그대로 표시한다.
                        [Advanced]: 고급선택사항
				[Label]: Log Stdout To Raw Format
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="Warning" minOccurs="0" name="action-on-resource-leak" type="action-on-resource-leakType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 컴포넌트(주로 Stateless Component - Servlet/JSP, Stateless Session Bean, MDB)에서
                        사용한 리소스(JCA, JDBC Connection 등)에 대한 Logging이나 반환 액션을 설정한다. 기본 동작은 Logging을 남기는 것(Warning)이다.
                        데이터소스별로 설정할 경우에 Action On Connection Leak을 설정한다.
				[Label]: Action On Resource Leak
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="tm-config" type="tm-configType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 트랜잭션 매니저(Transaction Manager)는 글로벌 트랜잭션(Global Transaction)을 시작하고 종료한다. 트랜잭션을
                        종료할 때 트랜잭션 매니저는 리소스 매니저(Resource Manager)와 통신을 하면서 Commit인지 Rollback인지 결정한다.
                        이렇게 함으로써 트랜잭션 매니저는 글로벌 트랜잭션의 원자성을 보장하게 된다.그러나 실제 상황에서는
                        많은 예외적인 상황이 발생하는데, 이에 대한 대응책으로 다양한 Timeout 메커니즘을 제공한다.
                        하위 항목에서는 트랜잭션 매니저의 Timeout 등을 설정한다.
                        [Advanced]: 고급선택사항
				[Label]: Tm Config
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jmx-manager" type="jmx-managerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: JEUS Manager JVM에서 사용하는 JMX에 대한 설정이다.
				[Label]: Jmx Manager
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="external-resource" type="external-resourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: @Deprecated. 서버에서 사용될 jTmax나 Infinite Cache와 같은 External Resource들을 지정한다.
                        도메인에 설정된 External Resource의 동일한 이름을 통해 설정을 덮어쓸수 있다.
				[Label]: External Resource
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="managed-executor-service" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에서 유효한 ManagedExecutorService의 export name를 명시한다.
				[Label]: Managed Executor Service
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="managed-scheduled-executor-service" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에서 유효한 ManagedScheduledExecutorService의 export name를 명시한다.
				[Label]: Managed Scheduled Executor Service
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="context-service" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에서 유효한 ContextService의 export name를 명시한다.
				[Label]: Context Service
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="system-thread-pool" type="system-thread-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버 서비스들이 사용하는 공용 Thread Pool에 대한 설정이다.
                        각 서비스별로 Dedicated Thread Pool을 설정하지 않았다면
                        공용 Thread Pool을 사용하게 된다.
                        [Dynamic]: 동적 변경이 가능하다
                        [Advanced]: Thread Pool 페이지가 분리되면 고급선택사항 아님
				[Label]: System Thread Pool
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="managed-thread-factory" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 서버에서 유효한 ManagedThreadFactory의 export name를 명시한다.
				[Label]: Managed Thread Factory
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="scheduler" type="schedulerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: JEUS Scheduler에 관련된 사항을 설정한다.
                        [Advanced]: 서버 설정 페이지의 고급선택사항(별도의 서비스 페이지로 분리한다면 고급선택사항 아님)
				[Label]: Scheduler
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="naming-server" type="naming-serverType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: JNDI 서비스를 하기 위한 JEUS Naming Server의 정보를 설정한다.
                        [Advanced]: 서버 설정 페이지에 들어간다면 고급선택사항(별도의 서비스 페이지 또는 Thread Pool 설정 페이지로 분리한다면 고급선택사항 아님)
				[Label]: Naming Server
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="data-source-remote-lookup" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: Remote JVM상에서의 데이터소스 Lookup이 가능하도록 한다.
                        데이터소스 Lookup을 통해 Remote JVM에서 Connection Pool을 구성하여 사용하던 기존 Standalone Client를 지원할 수 있다.
				[Label]: Data Source Remote Lookup
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:group name="cluster-specific-group">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[ID]: ID
                        [Description]: 클러스터의 고유한 이름을 설정한다. 이 이름은 도메인 내에서 유일해야 하며, 클러스터를 구성할 때
                        고유한 식별자(ID)로 사용된다.
				[Label]: Name
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="servers" type="clusterServersType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 클러스터에 참여할 서버들의 목록을 설정한다.
				[Label]: Servers
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="session-cluster-config" type="session-cluster-configType" >
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 클러스터의 세션 서버에 대한 정보를 설정한다.
				[Label]: Session Router Config
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="dynamic-servers" type="dynamicServersType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: 클러스터에 참여할 동적서버들에 대한 정보를 설정한다. 사용할 서버 템플릿을 먼저 생성해야 하며,
                        서버 템플릿과 클러스터의 설정이 충돌되는 경우에는 클러스터의 설정을 따른다.
				[Label]: Dynamic Servers
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="cluster-wide-timer-service" type="cluster-wide-timer-serviceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
				[Description]: Cluster Wide Timer 서비스에 대한 정보를 설정한다.
				[Label]: Cluster Wide Timer Service
			]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="cluster-wide-timer-serviceType">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="1" name="database-setting" type="database-settingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Cluster Wide Timer 서비스가 Persistent하게 관리하는 Timer Handle을 외부 DB에 저장하고 싶은 경우에 설정한다.
						[Label]: Database Setting
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="listenersType">
        <xs:sequence>
            <xs:element minOccurs="0" name="base" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JNDI, Security, JMX, 클래스 FTP 서비스 등이 기본적으로 이용하는
                                Base Listener를 지정한다. Listener 설정의 Name과 동일한 값을 설정해야 한다.
                                설정하지 않으면 9736 포트와 기본 설정들로 Listener 생성을 시도한다.
						[Label]: Base
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" name="listener" type="listenerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버의 JEUS 시스템이 사용하는 Socket Listener 및 Socket Connection Request 처리에 필요한 각종 속성을 지정한다.
						[Label]: Listener
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="listenerType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 통합 포트 Listener를 나타내는 고유한 ID를 설정한다. 다른 설정에서 이 Listener에 대해 언급할 때 사용한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="listen-address" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IP가 여러 개 할당되어 있을 때 이 통합 포트 Listener가 바인드될 서비스 IP 주소를 설정한다.
                                지정하지 않은 경우는 Anyaddress로 바인드된다.
						[Label]: Listen Address
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="9736" minOccurs="0" name="listen-port" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 통합 포트 Listener의 포트를 설정한다.
                        아무런 설정이 없는 경우에는 항상 9736을 사용하기 때문에 여러 서버를 같은 머신에 운영하는 경우에는 반드시 지정해야 한다.
						[Label]: Listen Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="1" minOccurs="0" name="selectors" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 통합 포트 Listener의 I/O처리에 사용할 Selector의 개수를 설정한다.
                        CPU Core의 개수로 설정하는 것이 일반적이며, 기본값은 1이다.
						[Label]: Selectors
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="use-dual-selector" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 통합 포트 Listener의 Read와 Write에 사용하는 Selector를 분리할지
                        여부를 설정한다. 대용량의 Read/Write가 동시에 필요할 경우에 설정하는 것이 바람직하다.
						[Label]: Use Dual Selector
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="128" minOccurs="0" name="backlog" type="off-intType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 통합 포트 Listener에 대한 Backlog 값을 지정한다.
						[Label]: Backlog
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="ssl" type="server-sslType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: SSL 속성을 지정하고, 해당 Listener를 사용하는 모든 서비스에 SSL이 적용됨을 선언한다.
						[Label]: Ssl
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="keep-alive-timeout" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: KeepAlive 형태의 클라이언트가 설정된 시간 동안 아무런 요청이 없는 경우 끊어준다.
                        Base Listener에는 설정하는 것을 권장하지 않는다.
                        [Value Description]: 단위는 밀리세컨드이며 0 또는 그보다 큰 값을 설정해야 한다. 0을 설정할 경우 끊지 않는다.
						[Label]: Keep Alive Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="30000" minOccurs="0" name="read-timeout" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 새로 받아들인 소켓에 대해서 읽기 함수가 Blocking되는 시간을 설정한다.
                        이 소켓이 목적으로 하는 서비스로 분배하기 위해 판별할 때 부터 시작하여 서비스로 전달된 후에도 계속 적용된다.
                        [Value Description]: 단위는 밀리세컨드이며 0 또는 그보다 큰 값을 설정해야 한다. 0을 설정할 경우 무한히 Blocking된다.
						[Label]: Read Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="reserved-thread-num" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 포트 통합 서비스 처리를 위한 Thread Pool에 대한 부가적인 설정이다.
                        기본적으로 시스템 Thread Pool(threadpool.System)을 사용하지만 특별히 이 서비스를 위한 스레드를 미리 할당하고 싶을 경우에만 설정한다.
                        설정한 값은 다른 서비스들과 합산했을 때 시스템 Thread Pool의 최댓값을 넘지 않도록 해야 한다.
						[Label]: Reserved Thread Num
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="server-sslType">
        <xs:group ref="ssl-config-group"/>
    </xs:complexType>

    <xs:complexType name="resource-refsType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버 혹은 클러스터에서 유효한 리소스의 ID를 명시한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="enable-interopType">
        <xs:sequence>
            <xs:element minOccurs="0" name="interop-ssl-config" type="keystore-configType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Keystore 및 Truststore 파일에 대해 설정한다.
						[Label]: Interop Ssl Config
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="lifecycle-invocationType">
        <xs:sequence>
            <xs:element name="class-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: Lifecycle 이벤트의 Callback 메소드가 존재하는 Fully Qualified Class Name을 지정한다.
                        [Example]: com.tmax.event.ServerLifecycleLinstener
						[Label]: Class Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:group ref="library-ref-group"/>
            <xs:element maxOccurs="unbounded" name="invocation" type="invocationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클래스 내의 Invocation 세부 정보를 설정한다.
                        [Dynamic]: 동적으로 Invocation을 추가할 수 있다.
						[Label]: Invocation
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="invocationType">
        <xs:sequence>
            <xs:element name="invocation-method" type="methodParamType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Invocation에 사용될 메소드를 지정한다.
                        [Dynamic]: 동적으로 메소드 변경이 가능하다.
						[Label]: Invocation Method
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="invocation-argument" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메소드를 호출할 때 사용하는 Argument를 지정한다.
                        [Dynamic]: 동적으로 Argument 변경이 가능하다.
						[Label]: Invocation Argument
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="invocation-type" type="invocation-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메소드가 호출되는 시점을 지정한다.
                        [Dynamic]: 동적으로 호출 시점을 변경할 수 있으나 이미 호출 시점이 지났다면 Restart할 때 반영된다.
						[Label]: Invocation Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="xs:int" use="optional"/>
    </xs:complexType>

    <xs:simpleType name="invocation-typeType">
        <xs:restriction base="valuableToken">
            <xs:enumeration value="BOOT">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버가 시작되고 엔진들이 띄워지기 전의 시점이다.
						[Label]: BOOT
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="BEFORE_DEPLOY">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버가 시작되고 등록된 애플리케이션이 Deploy되기 전의 시점이다.
						[Label]: BEFORE_DEPLOY
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="AFTER_DEPLOY">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버가 시작되고 등록된 애플리케이션이 Deploy된 후의 시점이다.
						[Label]: AFTER_DEPLOY
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="READY">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버가 시작되고 등록된 애플리케이션이 Deploy된 후 서비스가 준비된 시점이다.
						[Label]: READY
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="BEFORE_UNDEPLOY">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버가 다운(Down) 명령을 받았을 때 운영 중인 애플리케이션들을 Undeploy하기 전의 시점이다.
						[Label]: BEFORE_UNDEPLOY
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="AFTER_UNDEPLOY">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버가 다운(Down) 명령을 받았고 운영 중인 애플리케이션들을 Undeploy한 후의 시점이다.
						[Label]: AFTER_UNDEPLOY
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="jmx-managerType">
        <xs:sequence>
        	<xs:element maxOccurs="1" minOccurs="0" name="use-rmi-connector" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: RMI Connector Server를 사용할지 여부를 지정한다.
						[Label]: Use Rmi Connector
					]]></xs:documentation>
                </xs:annotation>        		
        	</xs:element>
        	<xs:element maxOccurs="1" minOccurs="0" name="use-html-adaptor" type="xs:boolean">
        	   <xs:annotation>
        			<xs:documentation><![CDATA[
                    [Description] Html Adaptor를 사용할지 여부를 지정한다.
        			[Label]: Use Html Adaptor
					]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="html-adaptor-port" type="off-intType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
						[Description]: JMX의 어댑터 중 하나인 HTML 어댑터의 포트를 지정한다.
                        여기에 지정된 값으로 웹 브라우저에 접속한다.
						[Label]: Html Adaptor Port
					]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element minOccurs="0" name="snmp-adaptor" type="snmp-adaptorType">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
						[Description]: JMX의 어댑터 중 하나인 SNMP 어댑터를 설정한다.
						[Label]: Snmp Adaptor
					]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        	<xs:element maxOccurs="unbounded" minOccurs="0" name="mlet-url" type="xs:token">
        		<xs:annotation>
        			<xs:documentation><![CDATA[
						[Description]: 서버의 MBean 서버에 등록할 MLet의 URL을 지정한다.
						[Label]: Mlet Url
					]]></xs:documentation>
        		</xs:annotation>
        	</xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="snmp-adaptorType">
        <xs:sequence>
            <xs:element name="snmp-adaptor-port" type="snmp-adaptor-portType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: SNMP 어댑터의 Listener 포트를 설정한다.
						[Label]: Snmp Adaptor Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="3" minOccurs="0" name="snmp-version" type="snmp-versionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: SNMP 버전을 지정하며 1, 2 또는 3을 지정할 수 있다
						[Label]: Snmp Version
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="4096" minOccurs="0" name="snmp-max-packet-size" type="snmp-max-packet-sizeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: SNMP 패킷에 대한 최댓값을 설정하며, 최소 256 Byte부터 설정할 수 있다.
						[Label]: Snmp Max Packet Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element default="false" minOccurs="0" name="snmp-security" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 보안의 적용 여부를 설정한다. 보안은 SNMP 버전 3에서만 지정이 가능하다.
						[Label]: Snmp Security
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element maxOccurs="unbounded" minOccurs="0" name="trap-demon" type="trap-demonType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 장애 상황이 발생한 경우에 대해 TRAP 메시지를 보낼 서버를 설정한다. 여러 개 설정이 가능하며
						설정된 모든 IP 주소로 메시지를 전송한다.
						[Label]: Trap Demon
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="pooling" type="poolingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: SNMP 서버에서 요청을 처리하는 스레드로 구성되어 있다. 아래 항목은 이
                        스레드를 관리하는 Pool을 설정한다.
						[Label]: Pooling
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="trap-demonType">
        <xs:sequence>
            <xs:element name="ip-address" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Demon의 IP 주소를 설정한다.
                        [Value Description]: a valid IP address
                        [Example]: 111.111.111.1
						[Label]: Ip Address
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="port" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Demon의 포트 번호를 설정한다.
                        [Value Description]: a port number
                        [Example]: 8888
						[Label]: Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="snmp-adaptor-portType">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="1"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="snmp-versionType">
        <xs:restriction base="xs:int">
            <xs:enumeration value="1"/>
            <xs:enumeration value="2"/>
            <xs:enumeration value="3"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="snmp-max-packet-sizeType">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="256"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="tm-configType">
        <xs:sequence>
            <xs:element minOccurs="0" name="pooling" type="thread-poolingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션을 처리하기 위한 Thread Pool을 설정한다. 설정하지 않았을 경우는 System Thread Pool을 사용한다.
                        [Dynamic]: 동적 변경이 가능하다. System Thread Pool을 사용하다가 Dedicated Thread Pool을 사용하기 위해 설정을 변경하거나,
                        Dedicated Thread Pool을 사용하다가 System Thread Pool을 사용하기 위해 설정을 변경하는 것은 동적 반영이 되지 않는다.
                        Pool의 종류를 변경하는 경우에는 서버를 재시작해야 한다.
                        System Thread Pool을 사용하다가 Reserved 개수를 조정하거나, Dedicataed Thread Pool을 사용하다가 Pool 속성을 변경하는 것은 동적 반영이 가능하다.
						[Label]: Pooling
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="600000" minOccurs="0" name="active-timeout" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 글로벌 트랜잭션이 시작되면 설정한 시간 내에 Commit이 실행되어야 한다. 그렇지 않으면
                        트랜잭션 매니저가 Rollback 시킨다.
                        [Value Description]: 밀리세컨드
                        [Basic]: 고급선택사항 아님
						[Label]: Active Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="120000" minOccurs="0" name="prepare-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션이 Commit될 때 Root Coordinator는 설정한 시간 내에 Sub Coordinator와
                        리소스 매니저로부터 ‘prepare’ 신호를 받아야 한다. 만약, 받지 못하면 Root Coordinator는
                        글로벌 트랜잭션을 Rollback 시킨다.
                        [Value Description]: 밀리세컨드
						[Label]: Prepare Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="60000" minOccurs="0" name="prepared-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션이 Commit되어 Root Coordinator로부터 Prepare Message를 받으면 Sub Coordinator는 Prepare에 대한 응답을 Root Coordinator로 보내고 Global Decision을 기다린다.
                         Sub Coordinator는 자신의 Root Coordinator로부터 여기에 설정된 시간 안에 Global Decision을 받아야 한다.
                         만약, 이 시간 내에 받질 못할 경우, 현재 Sub Coordinator에 local XA resource가 있으면 전체 transaction은 rollback이 되고 local XA resource가 없으면 별다른 작업을 하지 않는다.
                        [Value Description]: 밀리세컨드
						[Label]: Prepared Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="240000" minOccurs="0" name="commit-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Root Coordinator는 Sub Coordinator와 리소스 매니저에게 Commit 메시지를
                        보낸 후 설정한 시간 이내에 Commit이나 Rollback에 대한 결과를 받아야 한다. 만약, 결과가 오지 않으면,
                        Root Coordinator는 글로벌 트랜잭션을 Incomplete List에 기록해서, 트랜잭션이 완전히 끝나지
                        않았음을 남겨둔다.
                        [Value Description]: 밀리세컨드
						[Label]: Commit Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="120000" minOccurs="0" name="recovery-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션을 복구할 때 사용되는 설정이다. 트랜잭션 매니저는 트랜잭션 복구를 위해서
                        복구될 트랜잭션 정보를 가져오려고 한다. 만약, 다른 트랜잭션 매니저에서 이 시간 내에 복구 정보를
                        알려주지 않으면, 트랜잭션 복구를 시스템 관리자에게 남겨두고 더 이상 진행하지 않는다.
                        [Value Description]: 밀리세컨드
						[Label]: Recovery Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="86400000" minOccurs="0" name="incomplete-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션 매니저는 전체 트랜잭션 처리를 완료하기 위해, 실패한 글로벌 트랜잭션의
                        목록을 보관한다. 완료되지 못한 글로벌 트랜잭션의 정보는 복구를 처리할 때 사용되므로, 설정된
                        시간까지 보관된다. 그러므로 이 시간이 너무 짧으면 복구 정보가 빨리 삭제되고, 트랜잭션
                        매니저가 해당 글로벌 트랜잭션의 무결성을 복구할 수 없게 된다. 그 결과 글로벌 트랜잭션 복구를
                        위해서, 시스템 관리자가 많은 작업을 직접 처리해야만 한다.
                        [Value Description]: 밀리세컨드
						[Label]: Incomplete Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="${SERVER_HOME}/.workspace/tmlog" minOccurs="0" name="tx-log-dir" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 현재의 트랜잭션 매니저의 Recovery용 로그 파일이 저장되는 디렉터리를 설정한다.
                        설정하지 않았을 경우 기본값으로 "${SERVER_HOME}/.workspace/tmlog"을 사용한다.
                        만약, Automated Transaction Recovery 서비스를 사용할 경우 공유 가능한 디렉터리가 설정되어 있어야 한다.
						[Label]: Tx Log Dir
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="automatic-recovery" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터링 환경에서 현재의 트랜잭션 매니저가 Failure될 경우 다른 곳에서 자동으로 Indoubt 트랜잭션을 복구해주는 기능을 사용할지의 여부를 설정한다.
                        이 기능이 올바로 동작하기 위해서는 클러스터링 설정이 되어 있어야 하며, Failed TM의 로그 디렉터리를 다른 곳에서 접근 가능하도록 제대로 설정되어 있어야 한다.
                        [Dynamic]: 동적으로 사용을 활성화할 수 있다.
                        [Basic]: 고급선택사항 아님
						[Label]: Automatic Recovery
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="naming-serverType">
        <xs:sequence>
            <xs:element minOccurs="0" name="pooling" type="thread-poolingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JNDI 서비스를 위한 JEUS Naming Server로의 요청을 처리하기 위한 Thread Pool을 설정한다.
						[Label]: Pooling
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="external-resourceType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: External Resource를 나타내는 이름을 의미한다. External Resource의 이름은 유일해야 한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="class-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: WebT 나 jTmax 또는 InfiniteCache의 ResourceBootstrapper 구현 클래스 이름을 입력한다.
						[Label]: Class Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="property" type="propertyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: External Resource에서 사용할 프로퍼티를 지정한다.
						[Label]: Property
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="external-sourceType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jms-source" type="jmsSourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JEUS 트랜잭션 매니저와 IBM MQ나 Sonic MQ 등 Messaging Source 제품 사이의 상호 작용을 위해서는
                        아래 항목들을 설정해야 한다. 설정에 대한 자세한 정보는 해당 제품의 매뉴얼을 참조한다.
                        [Non-Dynamic]:동적으로 추가할 수 없다.
						[Label]: Jms Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="connector" type="connectorType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 리소스 어댑터의 아웃바운드를 관리하는 Connection Pool 및 Worker Pool에 대한 정보를 설정한다.
						[Label]: Connector
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jmsSourceType">
        <xs:sequence>
            <xs:element name="vendor" type="jmsVendorType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JMS Source 드라이버의 Vendor 이름을 설정한다.
						[Label]: Vendor
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="factory-class-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JMS Source 드라이버의 Factory 클래스 이름을 설정한다.
						[Label]: Factory Class Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="resource-type" type="typeResourceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JMS Source 타입을 설정한다.
						[Label]: Resource Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="export-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: JNDI에 등록되어 서비스 되는 이름이다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="queue" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Resource Type이 Q일 경우에만 사용된다. 자세한 내용은 IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: Queue
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="queueManager" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: T 타입을 제외한 IBM MQ를 사용할 경우에만 사용된다. 자세한 내용은 IBM MQ 매뉴얼을 참조한다.
						[Label]: QueueManager
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="topic" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Resource Type이 T일 경우에만 사용된다. 자세한 내용은 IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: Topic
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="property" type="typePropertyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JMS Source 설정에 필요한 프로퍼티들을 기술한다.
						[Label]: Property
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="jmsVendorType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="ibmmq">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 드라이버
						[Label]: ibmmq
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sonicmq">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Sonic MQ 드라이버
						[Label]: sonicmq
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="others">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 기타 JMS Source 드라이버
						[Label]: others
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="typeResourceType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="QCF">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: QCF
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TCF">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: TCF
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="Q">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: Q
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="T">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: T
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="XAQCF">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: XAQCF
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="XATCF">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: XATCF
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="LOCALXAQCF">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: LOCALXAQCF
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="LOCALXATCF">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 또는 Sonic MQ 매뉴얼을 참조한다.
						[Label]: LOCALXATCF
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="connectorType">
        <xs:sequence>
            <xs:element name="resource-adapter-module-id" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: JEUS에 Deploy된 리소스 어댑터 모듈을 가리키는 이름이다.
                        Standalone으로 Deploy된 경우에는 Standalone 리소스 어댑터 모듈의 이름을 명시한다.
                        EAR에 속한 리소스 어댑터일 경우에는 EAR의 이름과 리소스 어댑터 모듈의 이름을 함께 명시하며 이때 명시된 둘의 이름을 반드시 '#'으로 구분해야 한다.
                        [Basic]:
						[Label]: Resource Adapter Module Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="connection-pool" type="connectorConnectionPoolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connector Connection Pool 정보를 입력한다. ra.xml의 <connection-definition> 설정에 맞춰 Connection Pool이 생성된다.
                        입력하지 않을 경우에는 기본적인 Rule과 값에 따라 생성한다("JEUS JCA 안내서" 참고).
                        [Basic]:
						[Label]: Connection Pool
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="worker-pool" type="jca-worker-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Work Manager 정보를 설정한다. 이 설정이 없더라도 리소스 어댑터가 Work Manager를 사용하는 경우에는
                    기본적으로 생성하도록 되어 있다.
                    [Basic]:
						[Label]: Worker Pool
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="connectorConnectionPoolType">
        <xs:sequence>
            <xs:element name="connection-pool-id" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 리소스 어댑터 모듈에서 아웃바운드를 등록했을 경우 그것을 관리하기 위한 Connection Pool을 가리키는 이름이다.
                        Export Name 설정이 없을 경우에는 이것을 기본 JNDI 이름으로 사용하며,
                        다른 JNDI 이름으로 사용하고 싶은 경우에는 Export Name을 설정하면 된다.
                        이 값을 변경할 경우 동적으로 변경되지 않으며 JEUS 서버를 재시작해야 반영된다.
                        [Basic]:
						[Label]: Connection Pool Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="export-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에서 ConnectionFactory를 JNDI Lookup할 때 사용하는 이름이다.
                        이것이 설정되지 않으면 <connection-pool-id> 설정값을 JNDI 이름으로 사용한다.
                        [Basic]:
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connectionfactory-interface" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: ra.xml에 등록한 <connection-definition>의 <connectionfactory-interface>의 설정값
                        또는 @ConnectionDefinition으로 설정된 인터페이스 이름을 입력한다.
                        리소스 어댑터 모듈에는 <connection-definition>을 여러 개 설정할 수 있기 때문에 JEUS는 각각에 맞춰서 Connection Pool을 생성해야 한다.
                        그러므로 <connection-definition> 설정이 2개 이상 정의된 경우에는 이 값을 반드시 설정해야 한다.
                        [Basic]:
						[Label]: Connectionfactory Interface
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="user" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 기본 인증을 서버에 맡길 경우 이에 필요한 User의 이름을 설정한다.
                    [Basic]:
						[Label]: User
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="password" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 기본 인증을 서버에 맡길 경우 이에 필요한 Password를 설정한다.
                    암호화해서 저장할 때에는 '{algorithm}ciphertext'와 같은 형식으로 입력한다.
                    [Example]: {DES}FQrLbQ/D8O1lDVS71L28rw==
						[Label]: Password
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="transaction-support" type="transaction-supportType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool이 지원하는 트랜잭션 타입을 설정한다.
                    ra.xml에 설정된 값보다 우선된다.
                    XATransactionOnly 값은 더 이상 사용하지 않으며 XATransaction으로 취급한다.
                    [Advanced]:
						[Label]: Transaction Support
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="property" type="typePropertyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: ManagedConnectionFactory에 적용할 프로퍼티를 추가한다.
                    ra.xml에 설정된 값보다 우선된다.
                    [Advanced]:
						[Label]: Property
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="pooling" type="oldPoolingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JCA Connection Pool의 Size 및 조정에 관련된 설정들을 정의한다.
                        [Basic]:
						[Label]: Pooling
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="wait-free-connection" type="wait-free-connectionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool 안의 모든 커넥션들이 점유되어 있을 때 커넥션 요청을 핸들링하는 메소드를 정의한다.
                        [Basic]:
						[Label]: Wait Free Connection
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="use-match-connection" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Match를 사용할 것인지 결정한다. Connection Match에 관련된 내용은 JCA 표준을 참조한다.
                    [Advanced]:
						[Label]: Use Match Connection
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="allow-disposable-connection-when-match-failed" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Match가 실패했을 경우 임시 커넥션을 사용할 것인지를 설정한다.
                    Connection Match를 하지 않는 경우에는 이 값을 사용하지 않는다.
                    [Advanced]:
						[Label]: Allow Disposable Connection When Match Failed
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="use-lazy-transaction-enlistment" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JCA 스펙에서 제공하는 트랜잭션 최적화 기능 중 하나인 Lazy Transaction Enlistment 옵션의 사용 여부를 설정한다.
                    이 옵션을 사용할 경우 예상하는 트랜잭션 시나리오와 달라질 수 있으므로 주의한다.
                    [Advanced]:
						[Label]: Use Lazy Transaction Enlistment
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connection-validation" type="jcaConnectionValidationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Validation(커넥션 유효성 검사) 기능을 설정한다.
                    [Basic]:
						[Label]: Connection Validation
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="action-on-connection-leak" type="action-on-resource-leakType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션(주로 Stateless Component - Servlet/JSP, Stateless Session Bean, MDB)에서 사용하고 제대로 반환하지 않은 커넥션을 감지했을 때 JEUS가 취하는 액션을 정의한다.
                        NO_ACTION으로 설정하면 아무런 액션을 취하지 않고 WARNING으로 설정하면 반환되지 않은 커넥션 정보를 로그로 남긴다.
                        AUTO_CLOSE로 설정하면 반환되지 않은 커넥션 정보를 로그로 남기며 해당 커넥션을 회수한다.
                        설정하지 않을 경우 서버의 설정을 따른다.
                        [Advanced]:
						[Label]: Action On Connection Leak
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connection-trace" type="jca-connection-traceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션이 보여줄 수 있는 정보들을 생성해 놓을지 여부를 지정하는 옵션이다.
                    현재는 어떤 애플리케이션에서 커넥션을 사용하고 있는지 알 수 있도록 getConnection할 때의 StackTrace를 저장하는 기능을 제공한다.
                    [Advanced]:
						[Label]: Connection Trace
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="max-use-count" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 물리적 커넥션의 최대 사용 횟수를 설정한다.
                        설정한 횟수 이상 사용되면 새로운 커넥션으로 교체한다.
                        기본값은 0으로 이는 커넥션을 교체하지 않겠다는 의미다.
                        [Advanced]:
						[Label]: Max Use Count
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="10000" minOccurs="0" name="pool-destroy-timeout" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool을 Destroy할 때 대기하는 시간을 설정한다.
                        리소스 어댑터를 Undeploy할 때 Pool을 Destroy하는데, 커넥션을 닫으면서 리소스와 네트워크 통신을 할 경우 Block될 가능성이 존재한다.
                        따라서 설정된 시간만큼 기다린 뒤에도 Destroy가 진행되지 않으면 이를 무시하고 계속 Undeploy를 진행한다.
                        [Advanced]:
						[Label]: Pool Destroy Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="jca-worker-poolType">
        <xs:sequence>
            <xs:element default="0" minOccurs="0" name="min" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Work Manager가 관리하는 스레드 수의 최솟값이다.
                    [Basic]:
						[Label]: Min
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="5" minOccurs="0" name="max" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Work Manager가 관리하는 스레드 수의 최댓값이다.
                    [Basic]:
						[Label]: Max
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="60000" minOccurs="0" name="keep-alive-time" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Min의 설정값 이하의 스레드에 대해서 설정된 시간 동안 사용되지 않는다면 자동적으로 Thread Pool에서 제거된다.
                    밀리세컨드 단위로 설정한다.
                    0 이면 제거하지 않으며 기본값은 1분이다.
                    [Advanced]:
						[Label]: Keep Alive Time
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="4096" minOccurs="0" name="queue-size" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Work Manager가 Work를 저장할 Queue의 크기를 지정한다.
                    [Basic]:
						[Label]: Queue Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="-1" minOccurs="0" name="shutdown-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Work Manager가 종료될 때 바로 종료하지 않고 기다리는 시간을 설정한다.
                    즉, Graceful Shutdown을 지원한다.
                    밀리세컨드 단위로 설정한다.
                    -1 이면 기다리지 않으며, 0으로 설정하는 경우 모든 작업이 종료할 때까지 기다린다.
                    [Advanced]:
						[Label]: Shutdown Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="mail-sourceType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="mail-entry" type="mail-entryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 각 Mail Entry는 JNDI Naming Lookup을 통해서 이용하는 e-mail 호스트를 의미한다.
                        이 기능에 대한 더 많은 정보는 JavaMail 1.2 스펙을 참조한다.
						[Label]: Mail Entry
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="mail-entryType">
        <xs:sequence>
            <xs:element name="export-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 클라이언트는 서비스에 등록되어 있는 이름을 간접적으로 사용한다. 이는 클라이언트
                        Descriptor에서 Export Name으로 바인드한 것이다. 이 이름은 java.mail.Session 객체로 바인드된다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="1" name="mail-property" type="mail-propertyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: mail 호스트를 지정하거나 접근할 때 필요한 사항을 설정한다.
						[Label]: Mail Property
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="mail-propertyType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: mail 프로퍼티의 이름을 설정한다. 프로퍼티 이름은 JavaMail 1.2 스펙을 따라야 한다
                        [Defined Value]: [mail.user] (서버에서 인식하는 User의 이름을 설정한다.)
                                         [mail.host] (mail 서버의 IP 주소를 설정한다.)
                                         [mail.from] (보내는 측의 e-mail을 입력한다.)
                                         [mail.transport.protocol] (사용할 mail 프로토콜을 설정한다.)
                                         [mail.protocol.user] (특정 protocol을 사용하는 서버에서 인식하는 User의 이름을 설정한다. protocol은 사용할 protocol을 적는다.)
                                         [mail.protocol.host] (특정 protocol을 사용하는 mail 서버의 IP 주소를 설정한다. protocol은 사용할 protocol을 적는다.)
                                         [mail.jeus.store.protocol] (사용할 message access 프로토콜을 설정한다.)
                                         [mail.debug] (debug mode를 설정한다.)
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: mail 프로퍼티의 값을 설정한다.
						[Label]: Value
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="url-sourceType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="url-entry" type="url-entryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 각 Entry는 실제 URL 주소와 JNDI Name을 매핑한다. 이는 URL이 Naming Server에
                        바인드되는 것을 의미한다.
						[Label]: Url Entry
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="url-entryType">
        <xs:sequence>
            <xs:element name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: JNDI Name은 Naming Server에 URL을 바인드할 때 사용된다.
                        [Example]: MYURL
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="url" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: URL은 바인드된 JNDI 서버의 JNDI Name에 매핑된다.
                        [Example]: http://www.foo.com
						[Label]: Url
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="message-bridgeType">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="0" name="bridge-connections" type="bridge-connectionsType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JMS Vendor로의 물리적인 연결 정보들을 설정한다.
						[Label]: Bridge Connections
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="bridges" type="bridge-entriesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Destination들을 설정한다.
						[Label]: Bridges
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="basedir" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: non-xa 모드에서 임시 저장소로 사용되는 Journal Store의 디렉터리를 설정한다.
						[Label]: Basedir
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="bridge-connectionsType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="connection" type="bridge-connectionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection은 JMS Vendor로의 물리적인 연결 정보를 나타낸다.
						[Label]: Connection
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="bridge-entriesType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="bridge" type="bridge-entryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Entry는 메시지를 가져와서 전달할 Bridge Destination들을 나타낸다.
                             Source Destination과 Target Destination으로 구성된다.
						[Label]: Bridge
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="bridge-connectionType">
        <xs:sequence>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: Bridge Connection의 유일한 이름을 설정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="classpath" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection의 Vendor가 제공하는 클래스의 경로를 설정한다.
						[Label]: Classpath
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="jndi-provider-url" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection이 이용할 JNDI 서비스의 Provider URL을 설정한다.
						[Label]: Jndi Provider Url
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="jndi-initial-context-factory" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection이 이용할 JNDI 서비스의 Initial Context Factory 이름을 설정한다.
						[Label]: Jndi Initial Context Factory
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="connection-factory" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection이 이용할 JMS Connection Factory 이름을 설정한다.
						[Label]: Connection Factory
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="xa-support" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection이 XA를 지원하는지 여부를 설정한다.
						[Label]: Xa Support
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="username" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection이 이용할 JMS Connection Factory에 필요한 Username을 설정한다.
						[Label]: Username
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="password" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Connection이 이용할 JMS Connection Factory에 필요한 Password를 설정한다.
						[Label]: Password
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="bridge-entryType">
        <xs:sequence>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: Bridge Entry를 구분하기 위한 이름을 설정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="source" type="bridge-destinationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Entry가 메시지를 가져올 Bridge Destination을 설정한다.
						[Label]: Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="target" type="bridge-destinationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Entry가 메시지를 전달할 Bridge Destination을 설정한다.
						[Label]: Target
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-selector" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Entry에 설정할 메시지 Selector를 설정한다.
						[Label]: Message Selector
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="10000" minOccurs="0" name="timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메시지를 가져올 때의 Timeout을 설정한다.
						[Label]: Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="bridge-destinationType">
        <xs:sequence>
            <xs:element name="connection-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: Bridge Destination을 설정할 Bridge Connection의 이름을 설정한다.
						[Label]: Connection Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="destination" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Destination의 JMS Destination 이름을 설정한다.
						[Label]: Destination
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="type" type="destination-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Bridge Destination의 JMS Destination의 타입을 설정한다.
                        Queue 또는 Topic을 설정할 수 있다
						[Label]: Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="customResourceType">
        <xs:sequence>
            <xs:element name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: Custom Resource가 Naming Server에 등록되는 이름을 설정한다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="resource-class-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JavaBean 형태로 구현된 Custom Resource의 클래스 이름을 설정한다.
						[Label]: Resource Class Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="factory-class-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Custom Resource 인스턴스를 생성할 Objectfactory의 클래스 이름을 설정한다.
						[Label]: Factory Class Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="custom-resource-property" type="custom-resource-propertyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Custom Resource의 프로퍼티를 설정한다.
						[Label]: Custom Resource Property
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="managed-executor-serviceType">
        <xs:sequence>
            <xs:element name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: managed-executor-service가 Naming Server에 등록되는 이름을 설정한다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <!--xs:element minOccurs="0" maxOccurs="unbounded" name="context-category" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: context의 category를 지정한다. category로는 현재 Security, Classloader, All 이 있다.
                        context-category안에 Enter나 띄어쓰기로 여러 개의 category를 한 번에 나열할 수 있다.
                        최종 결과는 category의 합집합이 되며 설정이 없을 경우는 All로 간주 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element-->
            <xs:element default="false" minOccurs="0" name="long-running-task" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: managed-executor-service에서 동작하는 task가 오래 수행하는 지의 여부이며 boolean의 값으로 나타낸다.
						[Label]: Long Running Task
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="thread-pool" type="dedicated-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: managed-executor-service내부에서 쓰는 thread-pool 설정을 나타낸다.
						[Label]: Thread Pool
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="managed-scheduled-executor-serviceType">
        <xs:sequence>
            <xs:element name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: managed-scheduled-executor-service가 Naming Server에 등록되는 이름을 설정한다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <!--xs:element minOccurs="0" maxOccurs="unbounded" name="context-category" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: context의 category를 지정한다. category로는 현재 Security, Classloader, All 이 있다.
                        context-category안에 Enter나 띄어쓰기로 여러 개의 category를 한 번에 나열할 수 있다.
                        최종 결과는 category의 합집합이 되며 설정이 없을 경우는 All로 간주 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element-->
            <xs:element default="false" minOccurs="0" name="long-running-task" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: managed-scheduled-executor-service에서 동작하는 task가 오래 수행하는 지의 여부이며 boolean의 값으로 나타낸다.
						[Label]: Long Running Task
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="thread-pool" type="dedicated-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: managed-scheduled-executor-service내부에서 쓰는 thread-pool 설정을 나타낸다.
						[Label]: Thread Pool
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="context-serviceType">
        <xs:sequence>
            <xs:element name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: context-service가 Naming Server에 등록되는 이름을 설정한다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <!--xs:element minOccurs="0" maxOccurs="unbounded" name="context-category" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: context의 category를 지정한다. category로는 현재 Security, Classloader, All 이 있다.
                        context-category안에 Enter나 띄어쓰기로 여러 개의 category를 한 번에 나열할 수 있다.
                        최종 결과는 category의 합집합이 되며 설정이 없을 경우는 All로 간주 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element-->
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="managed-thread-factoryType">
        <xs:sequence>
            <xs:element name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: managed-thread-factory가 Naming Server에 등록되는 이름을 설정한다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <!--xs:element minOccurs="0" maxOccurs="unbounded" name="context-category" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: context의 category를 지정한다. category로는 현재 Security, Classloader, All 이 있다.
                        context-category안에 Enter나 띄어쓰기로 여러 개의 category를 한 번에 나열할 수 있다.
                        최종 결과는 category의 합집합이 되며 설정이 없을 경우는 All로 간주 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element-->
            <xs:element default="5" minOccurs="0" name="thread-priority" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: thread의 priority를 나타낸다. (default : 5)
                                [Value Description]: Integer 타입으로 thread의 priority를 나타낸다.
						[Label]: Thread Priority
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="custom-resource-propertyType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Custom Resource JavaBeans 프로퍼티의 이름을 설정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Custom Resource JavaBeans 프로퍼티의 값을 설정한다.
						[Label]: Value
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="data-sourceType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="database" type="databaseType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC 드라이버의 데이터소스 인스턴스를 생성하고 Connection Pool을 구성하기 위한 특성들을 담고 있다.
                        [Dynamic]: 동적 추가 및 삭제가 가능하다.
						[Label]: Database
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="cluster-ds" type="cluster-dsType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션 서버 차원에서 RAC의 Failover 및 Failback 기능을 제공하기 위해서 클러스터 데이터소스를 사용한다.
                        이것은 하나의 독립적인 JNDI 이름을 가진 데이터소스 인스턴스이다.
                        이 인스턴스는 애플리케이션의 호출을 받아서 클러스터링된 데이터소스 중에서 어느 하나로 전달시켜주는 역할을 한다.
                        Failover, Failback 기능을 사용할 경우에는 주 데이터소스가 다운되었을 경우 보조 데이터소스를 선택하여 애플리케이션의 요청 사항을 처리하게 된다.
                        [Dynamic]: 동적 추가 및 삭제가 가능하다.
						[Label]: Cluster Ds
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="cluster-dsType">
        <xs:sequence>
            <xs:element name="data-source-id" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 클러스터 데이터소스의 ID를 설정한다.
                        하나의 도메인에서 각 클러스터 데이터소스의 ID는 유일해야 한다.
                        [Basic]:
						[Label]: Data Source Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터 데이터소스의 JNDI 이름을 설정한다.
                        서로 다른 두 데이터소스가 서로 다른 서버에 JNDI 바인드되는 것을 보장할 수 있으면 해당 데이터소스들은 서로 같은 JNDI 이름을 가질 수 있다.
                        이는 임의의 서버에서 동일한 JNDI 이름을 가지는 서로 다른 데이터소스를 허용하지 않음을 의미한다.
                        설정되지 않으면 클러스터 데이터소스 ID를 JNDI 이름으로 사용한다.
                        [Basic]:
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="data-source-selector" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터 데이터소스로부터 커넥션을 얻을 때 사용자나 개발자가 특정 컴포넌트 데이터소스 선택에 대한 정책을 직접 정의할 수 있다.
                        jeus.jdbc.helper.DataSourceSelector 추상 클래스를 상속하여 구현하고 그 구현 클래스의 패키지 이름을 포함하는 이름을 적어준다.
                        이것을 설정하면 Load Balance 설정은 의미가 없다. 정책을 정의할 때는 대체로 동기화를 고려해야 하며 이는 구현자의 몫이다.
                        [Example]: foo.bar.MyDataSourceSelector
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Data Source Selector
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="load-balance" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Load Balancing 여부를 설정한다.
                        true로 설정하면 Is Pre Conn 설정과 Use Failback 설정은 아무런 기능을 하지 않는다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Load Balance
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="is-pre-conn" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터 데이터소스에 속한 컴포넌트 데이터소스들의 Connection Pool을 미리 생성할지의 여부를 설정한다.
                        컴포넌트 데이터소스들의 Connection Pool을 미리 생성해 놓으면 성능상으로 이점이 있으나 리소스의 절약면에서는 좋지 못하다.
                        [Performance Recommendation]: 성능 향상을 위해서는 true로 설정하고, 리소스의 절약을 위해서는 false로 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Is Pre Conn
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="use-failback" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 이전 버전에서는 Failover만을 지원했으므로 이에 대한 호환성을 위해 제공하는 설정이다.
                        보조 데이터소스로 Failover한 후에 주 데이터소스로 Failback할 것인지의 여부를 설정한다.
                        기본적으로 Failback을 시도한다.
                        Failback을 위해서는 반드시 주 데이터소스에 대하여 Check Query 및 Check Query Period를 설정해야 한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Use Failback
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" maxOccurs="1" minOccurs="0" name="xa-affinity" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 글로벌 트랜잭션 Affinity 설정 여부를 정한다. 이 설정이 켜지면 글로벌 트랜잭션 처리가 하나의 멤버 DS 인스턴스에 한정하여 이루어져
                        글로벌 트랜잭션 처리 성능 향상을 꾀할 수 있다.
                        [Advanced]:
						[Label]: Xa Affinity
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="1" name="component-data-sources" type="component-data-sourcesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터 데이터소스에 속한 컴포넌트 데이터소스들의 데이터소스 ID를 명시한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
						[Label]: Component Data Sources
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="ons-support" type="ons-supportType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: ONS와 결합된 클러스터 데이터소스를 설정한다.
                        ONS와 결합된 클러스터 데이터소스는 컴포넌트 데이터소스의 실패 및 복구 여부를 ONS를 통하여 보다 효과적으로 감지할 수 있다.
                        특히나 Load Balancing 방식일 때는 Runtime Load Balacing Advisory를 이용하여 좀 더 효율적인 Load Balancing을 제공하게 된다.
                        [Advanced]:
						[Label]: Ons Support
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="databaseType">
        <xs:sequence>
            <xs:element name="data-source-id" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 데이터소스의 ID를 설정한다.
                        하나의 도메인에서 데이터소스 ID는 데이터소스의 유일한 식별자로서 동작하도록 설정해야 한다.
                        [Basic]:
						[Label]: Data Source Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스의 JNDI 이름을 설정한다.
                        서로 다른 두 데이터소스가 서로 다른 서버에 JNDI 바인드되는 것을 보장할 수 있으면 해당 데이터소스들은 서로 같은 JNDI 이름을 가질 수 있다.
                        이는 임의의 서버에서 동일한 JNDI 이름을 가지는 서로 다른 데이터소스를 허용하지 않음을 의미한다.
                        설정되지 않으면 데이터소스 ID를 JNDI 이름으로 사용한다.
                        [Basic]:
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="data-source-class-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC 드라이버 데이터소스 클래스의 이름을 설정한다.
                        패키지 이름을 포함하는 완전한 형태로 적는다.
                        [Example]: oracle.jdbc.pool.OracleConnectionPoolDataSource
                        [Basic]:
						[Label]: Data Source Class Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="data-source-type" type="data-source-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스의 타입을 설정한다.
                        DataSource로 설정하면 Connection Pooling Service는 제공되지 않는다.
                        ConnectionPoolDataSource로 설정해야 Connection Pooling Service가 제공되며
                        XADataSource로 설정한 경우 Connection Pooling Service와 더불어 XA 연동이 지원된다.
                        [Basic]:
						[Label]: Data Source Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="vendor" type="vendorType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC 드라이버 Vendor의 이름을 설정한다.
                        [Basic]:
						[Label]: Vendor
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="data-source-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: @Deprecated. JDBC 드라이버의 데이터소스 클래스 인스턴스의 이름을 설정한다.
						[Label]: Data Source Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="service-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: @Deprecated. 단지 i-net JDBC 드라이버에서만 해당하는 설정으로 Oracle DB의 SID를 지정한다.
						[Label]: Service Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="description" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스에 대한 설명을 입력한다.
                        [Advanced]:
						[Label]: Description
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="network-protocol" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: @Deprecated. DB와의 연결에 사용되는 프로토콜을 설정한다.
						[Label]: Network Protocol
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="server-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB가 실행되는 호스트 이름 또는 IP를 설정한다.
                        [Basic]:
						[Label]: Server Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="port-number" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB Listener의 포트 번호를 설정한다.
                        [Basic]:
						[Label]: Port Number
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="database-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB의 이름을 설정한다.
                        Oracle의 경우에는 DB의 SID를 설정한다.
                        [Basic]:
						[Label]: Database Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="user" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB User의 ID를 설정한다.
                        트랜잭션 처리 등을 위해서는 충분한 권한을 가지고 있어야 한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
						[Label]: User
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="password" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB User의 Password를 설정한다.
                        암호화해서 저장할 때에는 '{algorithm}ciphertext'와 같은 형식으로 입력한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Example]: {DES}FQrLbQ/D8O1lDVS71L28rw==
						[Label]: Password
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="login-timeout" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB와 커넥션을 맺을 때 로그인 단계에서 기다리는 최대시간을 설정한다.
                        초 단위로 설정한다.
                        [Advanced]:
						[Label]: Login Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="isolation-level" type="isolation-levelType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: java.sql.Connection에서 정의하는 트랜잭션 Isolation을 설정한다.
                        [Advanced]:
						[Label]: Isolation Level
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="driver-type" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: @Deprecated. JDBC 드라이버의 타입으로 Oracle 드라이버에만 해당되는 설정이다.
						[Label]: Driver Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="DRIVER" minOccurs="0" name="auto-commit" type="auto-commitType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스의 기본 Auto Commit 설정으로 TRUE, FALSE, DRIVER 중 하나로 설정한다.
                        DRIVER로 설정하면 JEUS는 Auto Commit 설정에 관여하지 않으며 JDBC 드라이버의 Auto Commit 설정을 따르게 된다.
                        XA 에뮬레이션 기능을 사용하는 Connection Pool 데이터소스 또는 XA 데이터소스의 경우 트랜잭션이 연동되어있지 않을 때만 이 설정값이 유효하다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Auto Commit
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="stmt-query-timeout" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스로부터 얻은 커넥션을 통해 생성된 java.sql.Statement 객체에 지정될 Query Timeout을 설정한다.
                        JEUS는 JDBC API를 통해 정의되고 JDBC 드라이버 벤더에서 구현한 Query Timeout 설정 메소드(java.sql.Statement#setQueryTimeout)를 호출할 뿐이다.
                        JDBC 드라이버 Vendor별로 Query Timeout 적용에 다소간 차이를 보인다.
                        밀리세컨드 단위로 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Stmt Query Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="10000" minOccurs="0" name="pool-destroy-timeout" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool의 Destroy 완료를 기다리는 시간이다.
                        데이터소스를 정의한 애플리케이션을 Undeploy하거나 서버가 내려갈 때 Connection Pool을 Destroy하게 되는데, 커넥션을 제거하면서 DB와 네트워크 통신을 할 경우 Block될 가능성이 존재하여 Connection Pool Destory를 마냥 기다리는 문제가 발생할 수 있다.
                        이와 같은 문제를 피하기 위해 이 설정을 사용한다.
                        설정한 시간 만큼만 Connection Pool Destroy 완료를 기다려보고 Undeploy 또는 서버 다운을 이어서 진행한다.
                        밀리세컨드 단위로 설정한다.
                        [Advanced]:
						[Label]: Pool Destroy Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="property" type="typePropertyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC 드라이버별로 제각각일 수 있는 속성들의 설정을 모두 수용하기 위해 제공되는 통일된 설정 방법이다.
                        하나의 속성에 대하여 '이름:타입=값'의 형태로 입력하며 타입의 경우 보통 Java의 primitive 타입 클래스로 설정한다.
                        복수의 속성이 설정될 경우 콤마(,)로 구분한다.
                        [Advanced]:
						[Label]: Property
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="action-on-connection-leak" type="action-on-resource-leakType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션(주로 Stateless Component - Servlet/JSP, Stateless Session Bean, MDB)에서 사용하고 제대로 반환하지 않은 JDBC 커넥션을 감지했을 때 JEUS가 취하는 액션을 정의한다.
                        NO_ACTION으로 설정하면 아무런 액션을 취하지 않고 WARNING으로 설정하면 반환되지 않은 JDBC 커넥션 정보를 로그로 남긴다.
                        AUTO_CLOSE로 설정하면 반환되지 않은 JDBC 커넥션 정보를 로그로 남기며 해당 JDBC 커넥션을 회수한다.
                        설정하지 않을 경우 서버의 설정을 따른다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Action On Connection Leak
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="support-xa-emulation" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool 데이터소스 타입의 데이터소스에만 유효한 설정으로 이 설정을 적용할 경우 Connection Pool 데이터소스의 커넥션이 글로벌 트랜잭션(XA)에 참여하도록 에뮬레이션한다.
                        JEUS 6 까지의 LocalXADataSource의 대체 옵션으로 ConnectionPoolDataSource 타입의 Connection Pool에 사용한다.
                        하나의 트랜잭션에는 하나의 Connection Pool 데이터소스만 참여할 수 있다는 점에 유의해야 한다.
                        [Basic]:
						[Label]: Support Xa Emulation
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connection-pool" type="database-connection-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스별로 Connection Pool에 대한 정보를 설정한다.
                        [Basic]:
						[Label]: Connection Pool
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="isolation-levelType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="TRANSACTION_NONE">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션 지원을 하지 않는다.
						[Label]: TRANSACTION_NONE
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TRANSACTION_READ_UNCOMMITTED">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Dirty read, non-repeatable read, phantom read 모두를 허용한다.
						[Label]: TRANSACTION_READ_UNCOMMITTED
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TRANSACTION_READ_COMMITTED">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Dirty read는 불허하고 non-repeatable read와 phantom read는 허용한다.
						[Label]: TRANSACTION_READ_COMMITTED
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TRANSACTION_REPEATABLE_READ">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Dirty read와 non-repeatable read는 불허하고 phantom read는 허용한다.
						[Label]: TRANSACTION_REPEATABLE_READ
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="TRANSACTION_SERIALIZABLE">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Dirty read, non-repeatable read, phantom read 모두를 불허한다.
						[Label]: TRANSACTION_SERIALIZABLE
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="transportType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="BIND">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 매뉴얼을 참조한다.
						[Label]: BIND
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CLIENT">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: IBM MQ 매뉴얼을 참조한다.
						[Label]: CLIENT
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="data-source-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="DataSource">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC 커넥션을 반환하는 기본적인 데이터소스로 Connection Pooling을 제공하지 않는다.
						[Label]: DataSource
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="ConnectionPoolDataSource">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pooling을 제공하는 데이터소스이다.
						[Label]: ConnectionPoolDataSource
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="XADataSource">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JTA(XA, 2PC 등)가 참여 가능한 커넥션을 Pooling하는 데이터소스이다.
						[Label]: XADataSource
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="database-connection-poolType">
        <xs:sequence>
            <xs:element minOccurs="0" name="pooling" type="oldPoolingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC Connection Pool의 Size 및 조정에 관련된 설정들을 정의한다.
                        [Basic]:
						[Label]: Pooling
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="wait-free-connection" type="wait-free-connectionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool 안의 모든 커넥션들이 점유되어 있을 때 커넥션 요청을 핸들링하는 메소드를 정의한다.
                        [Basic]:
						[Label]: Wait Free Connection
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="delegation-datasource" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션과 연동하지 않은 상태에서는 XA 데이터소스를 통해 커넥션을 얻기보다 Connection Pool 데이터소스를 통해 커넥션을 얻는 것이 낫다.
                        기능상 차이가 없을 뿐더러 트랜잭션 연동을 위한 기능을 포함하고 있는 XA 커넥션은 아무래도 시스템에 부담을 더 주기 때문이다.
                        이를 위해 XA 데이터소스인 경우 이 설정을 통하여 트랜잭션과 연동하지 않은 상태에서의 커넥션 요청을 위임할 Connection Pool 데이터소스를 지정한다.
                        한편 Oracle, DB2 등에서 XA 커넥션을 트랜잭션 없이 사용도 하고 트랜잭션에 연동도 하면서 사용하다 보면 XA를 시작할 수 없는 Exception이 발생하기도 하는데 정확한 원인은 알 수 없기 때문에 이를 회피하기 위한 방편으로서도 이 설정을 이용한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Delegation Datasource
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="max-use-count" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 물리적 커넥션의 최대 사용 횟수를 설정한다.
                        설정한 횟수 이상 사용되면 새로운 커넥션으로 교체한다.
                        기본값은 0으로 이는 커넥션을 교체하지 않겠다는 의미다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Max Use Count
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="delegation-dba" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB의 세션을 강제로 종료할 수 있는 권한(DBA 권한)을 가진 데이터소스(이하 DBA 위임 데이터소스)의 JNDI 이름을 설정한다.
                        이 설정을 한 데이터소스로부터 얻어진 커넥션을 이용한 Query 수행이 일정 시간 이상 지체되면 JEUS는 위임 DBA 데이터소스를 통해 해당 커넥션과 연관된 DB 세션을 강제로 종료하도록 하는 Query를 DB로 보낸다.
                        이후 애플리케이션이 사용 불가능해진 커넥션으로 인해 발생한 Exception을 처리하고 커넥션을 닫으면 JEUS는 그 커넥션을 제거하고 DB로부터 새로운 커넥션을 얻어 Connection Pool에 넣는다.
                        현재 Tibero, Oracle, Sybase에 대해서 이 기능을 지원한다.
                        이 기능은 JDBC 2.0 이하의 드라이버에서 Query 수행이 지나치게 오래 걸릴 때 그것을 중단시킬 방법으로서 고안된 것이다.
                        그러나 JDBC 3.0 또는 그 이상의 JDBC 드라이버는 java.sql.Statement#setQueryTimeout을 구현하므로 이 기능을 통해 강제로 DB 세션을 제거하기보다는 Statement Query Timeout 설정을 이용하는 것을 권장한다.
                        특히나 XA 데이터소스의 경우 XA가 정상적으로 진행하는 도중에 DB 세션이 종료되면 XA 처리에 문제가 발생할 수 있기 때문에 Statement Query Timeout과 트랜잭션 Timeout을 적절하게 설정하여 사용하도록 한다.
                        [Advanced]:
						[Label]: Delegation Dba
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="-1" minOccurs="0" name="dba-timeout" type="off-intType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 위임 DBA 데이터소스는 이 설정으로 지정한 시간동안만 커넥션의 Query 수행을 기다려준다.
                        설정한 시간이 경과하면 해당 커넥션과 연관된 DB 세션을 강제로 종료하도록 하는 Query를 DB로 보낸다.
                        Delegation Dba가 설정된 경우에만 유효하며 밀리세컨드 단위로 설정한다.
                        [Advanced]:
						[Label]: Dba Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connection-validation" type="jdbcConnectionValidationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Validation(커넥션 유효성 검사) 기능을 설정한다.
                        JDBC 커넥션 내부 에러로 인한 끊김, 방화벽에 의한 소켓 끊김 현상 등을 확인할 때 유용하다.
                        커넥션의 상태에 이상이 있음이 확인되면 커넥션을 DB로부터 새로 받아 애플리케이션에 전달한다.
                        만약 RAC를 위한 클러스터 데이터소스에 속한 데이터소스라면 반드시 이 설정을 해야한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
						[Label]: Connection Validation
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="-1" minOccurs="0" name="stmt-caching-size" type="off-intType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC 드라이버는 애플리케이션에서 PreparedStatement를 요청할 때마다 파라미터로 넘어온 SQL 문장을 파싱한다.
                        이 파싱 작업이 성능에 영향을 줄 수 있기 때문에 이를 피하기 위해서 JEUS 내부적으로 PreparedStatement를 Caching하는 기능을 제공한다.
                        이 설정은 캐싱할 prepared statement의 개수를 지정한다.
                        이 기능을 사용하면 커넥션을 항상 열어둔 채로 사용하기 때문에 커넥션을 닫았을 때 드라이버가 해주는 클리어 작업이 이뤄지지 않는다.
                        예를 들어 Oracle JDBC 드라이버의 경우, Auto Commit을 false로 설정해놓고 사용하다가 Commit이나 Rollback을 하지 않고 커넥션을 닫으면 무조건 Commit을 하도록 되어 있는데 이러한 처리가 되지 않는다.
                        만약 JDBC 드라이버에서 Statement Cache 기능을 제공한다면 그것을 사용하기 바란다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Stmt Caching Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="-1" minOccurs="0" name="stmt-fetch-size" type="off-intType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JDBC 드라이버 Statement의 Fetch Size를 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Stmt Fetch Size
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connection-trace" type="jdbc-connection-traceType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션 관련 부가 정보 제공 여부를 설정한다.
                        [Advanced]:
						[Label]: Connection Trace
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="use-sql-trace" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션별로 사용하고 있는 SQL Query를 보여주는 기능이다.
                        jeus.jdbc.sql Logger의 레벨을 FINE으로 설정할 경우 서버 로그를 통해서 SQL Query 히스토리를 확인할 수 있다.
                        이 기능을 사용할 경우 JDBC 드라이버의 Statement 구현체를 JEUS의 것으로 감싸게되므로 JDBC 드라이버의 Statement 객체를 캐스팅해서 사용하는 애플리케이션은 이 기능을 사용할 수 없다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Use Sql Trace
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="keep-connection-handle-open" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 이 옵션을 true로 설정하면 XA 커넥션을 사용하고 Pool에 반납할 때 그에 대한 핸들(또는 논리적 커넥션)을 닫지 않고 열어둔다.
                        DB2 Universal 드라이버의 경우에 사용할 필요가 있다.
                        이 기능을 사용하면 커넥션 핸들이 닫히지 않으므로 커넥션을 닫을 때 드라이버가 해주는 클리어 작업이 이뤄지지 않는다.
                        예를 들어 Oracle JDBC 드라이버의 경우, Auto commit을 false로 설정해놓고 사용하다가 Commit이나 Rollback을 하지 않고 커넥션을 닫으면 무조건 Commit을 하도록 되어 있는데 이러한 처리가 되지 않는다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Keep Connection Handle Open
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="init-sql" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션을 생성한 뒤 가장 처음으로 수행하고자 하는 SQL Query를 설정한다.
                        [Advanced]:
						[Label]: Init Sql
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="wait-free-connectionType">
        <xs:sequence>
            <xs:element default="false" minOccurs="0" name="enable-wait" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool에 사용 가능한 커넥션이 없고 커넥션도 더 이상 늘릴 수 없을 때 커넥션 요청을 처리하는 방법을 결정한다.
                        true로 설정하면 이용 가능한 커넥션을 얻기 위해 기다린다.
                        false로 설정하면 새로운 커넥션을 생성해서 제공하지만 그 커넥션이 반환되었을 때는 Pooling되지 않고 버려진다.
                        이를 일회용(disposable) 커넥션이라고도 한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
						[Label]: Enable Wait
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="10000" minOccurs="0" name="wait-time" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션을 얻기 위해 대기하는 시간을 나타낸다.
                        만약, 이 시간이 지나면 시스템은 Timeout Exception을 던진다.
                        Enable Wait이 true일 경우에만 유효하다.
                        밀리세컨드 단위로 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
						[Label]: Wait Time
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jdbc-connection-traceType">
        <xs:sequence>
            <xs:element default="false" minOccurs="0" name="enabled" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션 관련 부가 정보 제공 여부를 설정한다.
                        false로 설정하면 Get Connection Trace와 Auto Commit Trace가 모두 무효하다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Enabled
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="get-connection-trace" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션이 java.sql.DataSource#getConnection을 호출했을 때의 Stack Trace를 확인할 수 있도록 한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Get Connection Trace
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="auto-commit-trace" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]:  java.sql.Connection#setAutoCommit이 호출되었을 때 관련 로그와 Stack Trace를 서버 로그에 기록하도록 한다.
                        단, jeus.jdbc.connection-trace Logger의 로그 레벨을 FINE으로 설정해야 한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Auto Commit Trace
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="clusterServersType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="server-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터에 참여할 서버의 이름을 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
						[Label]: Server Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jaxr-sourceType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jaxr-entry" type="jaxr-entryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JAXR 커넥션를 구성하기 위한 ConnectionFactory의 구성값을 설정한다.
						[Label]: Jaxr Entry
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jaxr-entryType">
        <xs:sequence>
            <xs:element name="export-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JAXR ConnectionFactory의 JNDI 이름을 설정한다. 이 값은 Naming Server에 ConnectionFactory를 등록할 때 사용된다.
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="connection-factory-class-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JAXR ConnectionFactory 클래스 이름을 설정한다.
						[Label]: Connection Factory Class Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="query-manager-URL" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Target Registry Provider의 Query Manager 서비스를 위한 URL을 입력한다.
                        UDDI Registry의 Inquiry URL이다.
						[Label]: Query Manager URL
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="lifeCycle-manager-URL" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Target Registry Rrovider의 Lifecycle Manager 서비스를 위한 URL을 입력한다.
                        UDDI Registry의 Publishing URL로, 입력하지 않으면 QueryManagerURL과 같다.
						[Label]: LifeCycle Manager URL
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="authentication-method" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Registry Provider의 인증을 얻기 위하여 사용하는 인증 방법을 설정한다.
						[Label]: Authentication Method
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jaxr-property" type="jaxr-propertyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: ConnectionFactory를 구성하기 위한 Configuration properties를 설정하기 위하여 사용된다.
						[Label]: Jaxr Property
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jaxr-propertyType">
        <xs:sequence>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JAXR 1.0 스펙에 따른 JAXR Configuration Property의 이름을 설정한다.
                        [Standard Properties]:    [javax.xml.registry.uddi.maxRows]:
                        UDDI Provider에서 Find Operation에 대하여 반환하는 열의 최댓값을 설정한다.
                                                  [javax.xml.registry.postalAddressScheme]:
                                                이 커넥션에 대하여 기본 postal address scheme으로 사용되는 ClassificationScheme의 ID를 설정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JAXR 프로퍼티의 값을 설정한다.
						[Label]: Value
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jdbcConnectionValidationType">
        <xs:sequence>
            <xs:element name="check-query" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션 상태 점검에 사용될 쿼리(Check Query)를 설정한다.
                        보통 DB와의 연결 유효성만을 확인하면 되므로 간단한 Select Query를 사용하는 것을 권장한다.
                        [Example]: select 1 from dual
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
						[Label]: Check Query
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="check-query-timeout" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션 점검을 위해 Check Query를 수행했을 때 DB가 응답이 없어 드라이버가 계속 기다리는 상황이 발생할 수 있다.
                        이런 경우를 피하기 위해 Check Query에 대해 Query Timeout을 적용한다.
                        이것은 JDBC API에서 정의한 java.sql.Statement#setQueryTimeout 메소드를 호출함으로 가능하다.
                        밀리세컨드 단위로 설정한다.
                        1000 밀리초보다 작을 경우 0으로 설정되므로 주의한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Check Query Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="non-validation-interval" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션 점검이 너무 잦아서 오버헤드가 발생하는 경우 설정한다.
                        커넥션 점검을 수행하기 직전의 시각과 가장 최근의 커넥션 점검 시각과의 차이가 설정한 시간 간격 이내면 커넥션 점검을 생략한다.
                        예를 들어 이 설정값이 5000ms인 경우 어떤 커넥션의 마지막 커넥션 점검 시각으로부터 아직 5초가 지나지 않았다면 그 커넥션에 대한 점검이 생략된 채 애플리케이션에 전달된다.
                        밀리세컨드 단위로 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Non Validation Interval
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="check-query-period" type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Connection Pool의 커넥션들을 설정한 주기마다 체크하여 문제가 있는 커넥션을 제거한다.
                        클러스터 데이터소스에 속한 데이터소스는 자신의 상태 체크에 사용하므로 반드시 설정해야 한다.
                        밀리세컨드 단위로 설정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
						[Label]: Check Query Period
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="check-query-class" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 사용자나 개발자가 커넥션 점검 기능을 Customize하고 싶을때 그것을 위해 구현한 클래스의 패키지 이름을 포함한 이름을 설정한다.
                        이 때 그 클래스는 반드시 jeus.jdbc.connectionpool.JEUSConnectionChecker 인터페이스를 구현해야 한다.
                        [Example]: foo.bar.MyConnectionChecker
                        [Advanced]:
						[Label]: Check Query Class
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="check-query-retrial-count" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션 점검은 기본적으로 Destroy Policy On Check Query가 FAILED_CONNECTION_ONLY로 설정되어 있을 경우 한 번 수행된다.
                        Destroy Policy On Check Query가 ALL_CONNECTIONS로 설정되어 있을 경우에는 최초의 커넥션 점검에서 커넥션 이상이 확인되면 또 다른 커넥션에 대해서 한 번 더 커넥션 점검이 이루어져 총 두 번의 커넥션 점검이 수행될 수 있다.
                        이 설정값이 이러한 기본 커넥션 점검 수행 횟수에 더해져 최종 커넥션 점검 수행 횟수가 정해진다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Check Query Retrial Count
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="FailedConnectionOnly" minOccurs="0" name="destroy-policy-on-check-query" type="destroy-policy-on-check-queryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 커넥션이 유효하지 않은 것으로 확인되었을 때 Connection Pool에 있는 다른 커넥션들에 대한 처리 정책을 설정한다.
                        FAILED_CONNECTION_ONLY로 설정하면 유효하지 않은 것으로 확인된 커넥션만 제거한다.
                        ALL_CONNTECTIONS로 설정하면 유효하지 않은 것으로 확인된 커넥션을 제거하고 Connection Pool에 있는 다른 커넥션의 유효성을 한 번 더 확인한다.
                        그조차 유효하지 않은 것으로 확인되면 Connection Pool의 모든 커넥션을 제거한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Advanced]:
						[Label]: Destroy Policy On Check Query
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="userInterceptorType">
        <xs:sequence>
            <xs:element minOccurs="0" name="preceding-command" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]:JEUS Server를 실행할 때 JAVA 커맨드보다 앞에 수행해줘야 할 명령을 설정한다.
                        [Examples]: execrset -c 0-1 -e
						[Label]: Preceding Command
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jeus-classloader-append-class-path" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]:JEUS의 최상위 ClassLoader에 새로운 classpath를 추가한다.
                        [Value Description]: OS path seperator로 구분되는 classpath를 설정한다.
                        [Example]: /jeus/mylib/classes:/jeus/mylib/lib/mylib.jar
						[Label]: Jeus Classloader Append Class Path
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="jeus-classloader-append-dirs" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]:JEUS의 최상위 ClassLoader에 설정한 디렉터리에 속한 모든 새로운 classpath를 추가한다.
                        [Value Description]: 디렉터리가 여러 개일 경우는 OS path seperator로 구분한다.
						[Label]: Jeus Classloader Append Dirs
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="profile-class-option-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Profile의 Main Class Name과 Profile Main Class에 필요한 Argument를 함께 입력한다.
                        즉, 서버 외에 이 태그에 지정된 다른 클래스가 실제 메인 클래스로 사용될 수 있다.
                        서버의 메인 클래스는 Profile의 Main Class의 Argument로 들어가게 된다.
						[Label]: Profile Class Option Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="boot-classloader-append-class-path" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]:JEUS의 최상위 ClassLoader가 아닌 서버 JVM을 띄울 경우에 SystemClassLoader에 설정되는 bootstrap.jar 뒤에
                        추가하고 싶은 classpath를 지정한다. SystemClassLoader는 JEUS의 최상위 ClassLoader의 Parent이다.
                        [Value Description]: OS path seperator로 구분되는 classpath를 설정한다.
                        [Example]: /jeus/mylib/classes:/jeus/mylib/lib/mylib.jar
						[Label]: Boot Classloader Append Class Path
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jvmConfigType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="jvm-option" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서버 JVM을 실행할 때 적용하는 옵션을 설정한다.
                        여러 개의 Jvm Option을 나열할 수 있으며,
                        Jvm Option안에 Enter나 띄어쓰기로 여러 개의 옵션을 한 번에 나열할 수 있다.
                        옵션을 적용하는 순서는 Jvm Option을 나열한 순서대로 적용한다.
                        JEUS 6까지 존재하던 Command Option은 이 항목로 대체 되었다.
						[Label]: Jvm Option
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="system-thread-poolType">
        <xs:group ref="thread-pool-group">
            <xs:annotation>
                <xs:documentation><![CDATA[
				[Description]: 서버 전반적으로 공유할 Thread Pool을 정의한다. 각 서비스별 전용 Thread Pool을 설정하지 않으면 공유 시스템 Thread Pool을 사용한다.
				[Label]:
			]]></xs:documentation>
            </xs:annotation>
        </xs:group>
    </xs:complexType>

    <xs:complexType name="deployed-applicationType">
        <xs:sequence>
            <xs:element name="id" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 도메인에서 애플리케이션을 관리를 위해 부여한 애플리케이션의 ID이다.
                        애플리케이션에 명령을 하려면 ID를 알아야 한다.
                        Install할 때 ID를 지정할 수 있고, ID가 지정되지 않은 경우 JEUS에서 내부적으로 생성한다. 이 값은 도메인에 유일한 값이어야 한다.
						[Label]: Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="path" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션이 존재하는 DAS(Domain Administrator Server)에서의 경로를 의미한다.
                	        도메인에 인스톨된 어플리케이션을 디플로이 한 경우는 INSTALL_HOME에 위치하는 애플리케이션 파일의 경로가 되고,
                	        애플리케이션이 애플리케이션 저장소에 위치하거나 절대 경로를 통해서 디플로이 된 경우에는 절대경로에 쓰여진다.
                	        이 값은 디플로이 작업이 마치면 DAS에서 xml에 쓰는 값이다. 사용자가 임의로 변경해서는 안된다.
						[Label]: Path
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="type"
                type="application-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션의 Type을 지정한다. EAR, EJB, WAR, CAR, RAR 중 하나의 값을 설정할 수 있다.
						[Label]: Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element maxOccurs="unbounded" minOccurs="0"
                name="target-server" type="application-targetType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션을 배포할 서버를 지정한다.
                        [Dynamic]
						[Label]: Target Server
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0"
                name="target-cluster" type="application-targetType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션을 배포할 클러스터를 지정한다.
                        [Dynamic]
						[Label]: Target Cluster
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0"
                name="target-all-servers" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션을 도메인에 존재하는 모든 서버에 배포할지 여부를 설정한다.
                    [Dynamic]
						[Label]: Target All Servers
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="virtual-host"
                type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 웹 어플리케이션을 서비스 할 웹 가상 호스트를 지정한다. 이곳에 설정한 가상 호스트는 target-all-servers 설정이 true일 경우에만 사용된다.
                    [Value Description]: 엔진 내에 지정된 가상 호스트를 가지고 있어야 한다.
						[Label]: Virtual Host
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="ISOLATED" maxOccurs="1" minOccurs="0"
                name="classloading" type="classloadingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션이 사용할 Classloading 방식을 선택한다. 지정하지 않으면
                            ISOLATED 방식으로 각 애플리케이션마다 별도의 Classloader 구조가 설정된다.
						[Label]: Classloading
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" maxOccurs="1" minOccurs="0"
                name="use-fast-deploy" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션 내의 EJB 모듈, 웹 애플리케이션의 웹 서비스 모듈에 대해
                        Fast Deploy를 적용한다. 즉, 이 애플리케이션이 Deploy 과정에서 Generated되어야 하는 클래스를
                        미리 포함하고 있다고 가정한다. 만약, 설정이 되어 있지 않다면 엔진의 기본 설정을 따른다.
						[Label]: Use Fast Deploy
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" maxOccurs="1" minOccurs="0"
                name="keep-generated" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션 내의 모듈들에 Keep Generated를 적용한다. 애플리케이션을 Deploy하거나
                            서비스하면서 생성되는 Generated 파일의 소스를 유지할 것인지 여부를 지정한다. 설정되어 있지
                            않으면 기본값은 false로, 생성된 소스를 유지하지 않고 삭제한다.
						[Label]: Keep Generated
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" maxOccurs="1" minOccurs="0"
                name="shared" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션이 위치하는 경로는 NAS임을 나타낸다. 이 값이 true이면, 해당 애플리케이션 파일은
                            NAS에 위치하고 서버에서 파일을 전송할 필요없이 애플리케이션 파일에 직접 접근하여 사용할 수 있다.
						[Label]: Shared
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0"
                name="security-domain-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에 적용할 Security 도메인을 설정한다. 설정하지 않으면
                        Default Application Domain 에 설정된 Security 도메인을 사용하게 된다.
						[Label]: Security Domain Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0"
                name="auto-redeploy-interval"
                type="nonNegativeLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션이 파일 변경여부를 감지하여 Redeploy해주는 Auto Redeploy 기능이 적용되도록 한다.
                        단위는 밀리세컨드이고 0을 설정하면 기본값인 10초가 적용된다.
                        지정한 시간 간격으로 애플리케이션 파일이 변경되었는지를 체크한다. 이 기능을 사용하더라도 사용자가 직접 애플리케이션을 Deploy해야 한다.
                        Deploy를 자동으로 해주는 기능이 아니고, Deploy되어 있는 애플리케이션 파일을 체크하여 Redeploy하는 주기이기 때문이다.
						[Label]: Auto Redeploy Interval
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="plan"
                type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션에 적용할 deployment plan file의 이름을 지정한다. deployment plan은 DAS에 install된 것만 유효하다.
						[Label]: Plan
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="context-path"
                type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: web 애플리케이션의 context root를 지정한다.이 값이 DD의 설정보다 우선한다.
						[Label]: Context Path
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="dependent-libraries"
                type="dependent-librariesType" minOccurs="0"
                maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션이 사용할 라이브러리들을 정의한다. 각 라이브러리들은 애플리케이션보다 먼저 디플로이 되어 있어야 한다.
						이 값은 디플로이 작업이 마치면 DAS에서 xml에 쓰는 값이다. 사용자가 임의로 변경해서는 안된다.
						[Label]: Dependent Libraries
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0"
                name="node-java-context" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: node Java Service로 사용할 application을 등록할 때 사용한다.
						설정한 경우 selector에서 즉각적으로 서비스가 되므로 매우 간단하고 신뢰할 수 있는 경우에만 사용한다.
						node-java-context는 http listener로 요청이 들어올 때만 selector에서 서비스가 되므로 http listener를 통해서 서비스하도록 한다.
						이 값이 DD의 설정보다 우선한다.
						[Label]: Node JAVA Context
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="application-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="EAR">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: EAR 애플리케이션의 타입이다.
						[Label]: EAR
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="WAR">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 웹 애플리케이션의 타입이다.
						[Label]: WAR
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="EJB">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: EJB 애플리케이션의 타입이다.
						[Label]: EJB
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="RAR">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 리소스 어댑터 애플리케이션의 타입이다.
						[Label]: RAR
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CAR">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션 클라이언트의 타입이다.
						[Label]: CAR
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="classloadingType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="ISOLATED">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션의 Classloader가 독립된 구조를 갖는다.
                        다른 애플리케이션의 Classloader와 분리되어서 서로 다른 애플리케이션의 클래스들을 사용할 수 없게 된다.
                        J2EE 스펙에 따른 애플리케이션 패키징을 했을 때 사용할 수 있다.
						[Label]: ISOLATED
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="SHARED">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션의 Classloader는 다른 애플리케이션의 Classloader와 같이 사용되어
                        서로의 클래스를 순서에 따라 공유할 수 있다. JEUS 4 이전 환경에서 개발한 애플리케이션의 경우에
                        이 속성을 의도하고 개발한 애플리케이션을 위해 남아있는 기능이다. 이 외의 애플리케이션의 경우 이 설정을
                        사용하는 것을 권장하지 않는다.
						[Label]: SHARED
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="deployed-librariesType">
        <xs:sequence>
            <xs:element name="deployed-library" type="deployed-libraryType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 서비스될 라이브러리의 디플로이 관련 세부 설정을 정의한다.
                        서버가 기동될 때 디플로이되는 라이브러리의 설정이다.
						[Label]: Deployed Library
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="deployed-libraryType">
        <xs:sequence>
            <xs:element name="id" type="xs:token" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 라이브러리의 이름이다. 라이브러리에 명령을 하려면 ID를 알아야 한다.
                        Install할 때 ID를 반드시 명시해야 하며, 이 값은 도메인에 유일한 값이어야 한다.
                        같은 라이브러리에 여러버전을 사용할 수도 있다.
						[Label]: Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:sequence>
                <xs:element name="library-versions" type="libraryVersionType" minOccurs="1" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
						[Description]: 도메인 내에서 서비스될 라이브러리의 각 버전별 디플로이 관련 세부 설정을 정의한다.
                        버전이 명시되지 않은 명령이 실행될 경우, 최신 버전에 대해 명령이 적용된다.
						[Label]: Versions
					]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="libraryVersionType">
        <xs:sequence>
            <xs:element name="version" type="xs:token" minOccurs="1" maxOccurs="1" default="1.0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
						[Description]: 해당 라이브러리의 버전 정보를 의미한다. 특정 라이브러리의 각 버전의 ID로 사용되며,
						각 버전별로 배포 및 참조가 가능하다. 애플리케이션이 라이브러리 참조 시 버전이 명시되어 있지 않을 경우,
						가장 높은 버전이 사용된다.
                        [Dynamic]
						[Label]: Version
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="path" type="xs:token" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 라이브러리가 존재하는 DAS(Domain Administrator Server)에서의 경로를 의미한다.
						도메인에 인스톨된 라이브러리를 디플로이 한 경우는 INSTALL_HOME에 위치하는 라이브러리 디렉토리의 경로가 된다.
						이 값은 디플로이 작업이 마치면 DAS에서 xml에 쓰는 값이다. 사용자가 임의로 변경해서는 안된다.
						[Label]: Path
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <!--<xs:element name="spec-version" type="xs:token" minOccurs="1" maxOccurs="1" default="1.0">-->
                <!--<xs:annotation>-->
                    <!--<xs:documentation><![CDATA[-->
						<!--[Description]: 해당 라이브러리의 spec 버전 정보를 의미한다.-->
                        <!--[Dynamic]-->
						<!--[Label]: Spec Version-->
					<!--]]></xs:documentation>-->
                <!--</xs:annotation>-->
            <!--</xs:element>-->

            <xs:element name="target-server" type="library-targetType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 라이브러리를 배포할 서버를 지정한다.
                        [Dynamic]
						[Label]: Target Server
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="target-cluster" type="library-targetType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 라이브러리를 배포할 클러스터를 지정한다.
                        [Dynamic]
						[Label]: Target Cluster
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="target-all-servers" type="xs:boolean" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 라이브러리를 도메인에 존재하는 모든 서버에 배포할지 여부를 설정한다.
                        [Dynamic]
						[Label]: Target All Servers
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="dependent-librariesType">
        <xs:sequence>
            <xs:element name="dependent-library" type="dependent-libraryType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 애플리케이션이 사용할 라이브러리를 정의한다. 디플로이 된 라이브러리 중에서 선택한다.
						[Label]: Dependent Library
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="dependent-libraryType">
        <xs:sequence>
            <xs:element name="id" type="xs:token" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 애플리케이션이 사용할 라이브러리의 이름이다.
						[Label]: Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="version" type="xs:token" minOccurs="0" maxOccurs="1" default="1.0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
						[Description]: 애플리케이션이 사용할 라이브러리의 버전이다.
						[Label]: Version
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="auto-commitType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="TRUE">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스의 Auto Commit 설정을 활성화한다.
						[Label]: TRUE
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FALSE">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스의 Auto Commit 설정을 비활성화한다.
						[Label]: FALSE
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DRIVER">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 데이터소스의 Auto Commit 설정이 JDBC 드라이버 설정을 따르도록 한다.
						[Label]: DRIVER
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="application-targetType">
    	<xs:sequence>
    		<xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 애플리케이션을 배포할 클러스터 이름이나 서버 이름을 지정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>    		
    		</xs:element>    		
    		<xs:element maxOccurs="1" minOccurs="0" name="virtual-host" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 웹 어플리케이션을 서비스 할 웹 가상 호스트를 지정한다.
                    [Value Description]: 엔진 내에 지정된 가상 호스트를 가지고 있어야 한다.
						[Label]: Virtual Host
					]]></xs:documentation>
                </xs:annotation>    		
    		</xs:element>
    	</xs:sequence>
    </xs:complexType>

    <xs:complexType name="library-targetType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 라이브러리를 배포할 클러스터 이름이나 서버 이름을 지정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
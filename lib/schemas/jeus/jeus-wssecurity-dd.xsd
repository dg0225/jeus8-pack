<?xml version="1.0" encoding="UTF-8" standalone="no"?><xs:schema xmlns="http://www.tmaxsoft.com/xml/ns/jeus" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus" version="8.0">
  <xs:complexType name="security-receiverType">
    <xs:sequence>
      <xs:element name="action-list" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 받게 되는 메시지가 어떤 보안이 적용되어 있어야 하는지 설정한다. 
                    Timestamp, Encrypt, Signature, UsernameToken이 들어갈 수 있다. 각각의 항목은 공백으로 분리한다.
            [Example]: UsernameToken Signature Encrypt
						[Label]: Action List
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element default="true" minOccurs="0" name="observeActionOrder" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Sender가 사용한 Action List의 순서와 Receiver의 Action List의 순서가 동일해야 하는지 여부를 설정한다.
						[Label]: ObserveActionOrder
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="password-callback-class" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Password Callback 클래스의 이름을 전체 패키지 이름으로 입력한다.
						[Label]: Password Callback Class
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="timeStamp" type="timeStampType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: TimeStamp에 적용할 ttl(timeToLive) aberration(오차)를 설정한다.
						[Label]: TimeStamp
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="decryption" type="decryptionType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 받는 메시지의 암호화된 부분을 해독하기 위한 설정이다.
						[Label]: Decryption
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="signature-verification" type="signature-verificationType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 받는 메시지의 서명을 검증하기 위한 설정이다.
						[Label]: Signature Verification
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="decryptionType">
    <xs:sequence>
      <xs:element name="keystore" type="keystoreType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지의 암호를 해독하기 위한 Keystore의 설정이다.
						[Label]: Keystore
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="keystoreType">
    <xs:sequence>
      <xs:element name="key-type" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Keystore에 저장되는 Key의 타입을 설정한다(JKS 혹은 pkcs12).
						[Label]: Key Type
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="keystore-password" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Keystore에 접근하기 위한 Password를 설정한다.
                           Password를 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다. ex) {DES}FQrLbQ/D8O1lDVS71L28rw==
						[Label]: Keystore Password
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="keystore-filename" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Keystore의 파일 이름을 설정한다. 파일 이름만 입력할 경우, 클래스 경로에서 찾게 되므로 파일 이름이나 절대 경로를 포함하는 파일 이름을 입력한다.
						[Label]: Keystore Filename
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="signature-verificationType">
    <xs:sequence>
      <xs:element name="keystore" type="keystoreType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 서명을 검증하기 위한 Keystore 설정이다.
						[Label]: Keystore
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="security-senderType">
    <xs:sequence>
      <xs:element name="action-list" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 어떤 보안을 적용할 것인지를 String으로 나열한다.
                    Timestamp, Encrypt, Signature, UsernameToken이 들어갈 수 있다. 각각의 항목은 공백으로 분리한다.
                        [Example]: UsernameToken Signature Encrypt
						[Label]: Action List
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="password-callback-class" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 패스워드를 설정하는 Callback 클래스의 전체 패키지 이름이다.
						[Label]: Password Callback Class
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="user" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: UsernameToken에 들어갈 이름과 서명에 들어갈 Key의 별칭을 설정한다.
						[Label]: User
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="timeStamp" type="timeStampType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: TimeStamp에 적용할 ttl(timeToLive) aberration(오차), 서명 여부를 설정한다.
						[Label]: TimeStamp
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="userNameToken" type="userNameTokenSenderType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: UsernameToken을 설정한다.
						[Label]: UserNameToken
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="signature-infos" type="signature-infosType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지에 서명을 하기 위한 설정이다.
						[Label]: Signature Infos
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="encryption-infos" type="encryption-infosType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지를 암호화하기 위한 설정이다.
						[Label]: Encryption Infos
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="userNameTokenSenderType">
    <xs:sequence>
      <xs:element minOccurs="0" name="password" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 사용할 Password를 설정한다.
                           Password를 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다. ex) {DES}FQrLbQ/D8O1lDVS71L28rw==
						[Label]: Password
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="passwordType" type="passwordTypeType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: UsernameToken에 사용될 Password의 타입을 설정한다.
                  PasswordDigest 혹은 PasswordText를 사용할 수 있다.
						[Label]: PasswordType
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="userTokenElements" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: UsernameToken에 추가될 항목(Element)의 리스트이다. 각 항목은 공백으로 분리된다. 
                  nonce 혹은 created가 사용될 수 있다. passwordType이 PasswordDigest일 경우에 사용이 가능하다.
						[Label]: UserTokenElements
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="passwordTypeType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="PasswordDigest">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: UsernameToken에 설정되는 암호가 Base64 ( SHA-1 ( nonce + created + password ) ) -> base64 encoding된 상태로 메시지에 포함된다.
						[Label]: PasswordDigest
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PasswordText">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: UsernameToken에 설정되는 암호가 평문으로 메시지에 포함된다.
						[Label]: PasswordText
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="timeStampType">
    <xs:sequence>
      <xs:element minOccurs="0" name="timeToLive" type="xs:positiveInteger">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 보내게 될 메시지의 유효기간을 초 단위로 설정한다.
						[Label]: TimeToLive
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="aberration" type="xs:integer">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 표준시와의 차이를 설정한다. 기본값은 0초이다.
						[Label]: Aberration
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="requireSignature" type="xs:boolean">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Timestamp에 서명을 할지 여부를 설정한다. 기본값은 true이다.
						[Label]: RequireSignature
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="precision" type="xs:positiveInteger">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 시스템 환경(네트워크, 처리지연 등)을 고려한 여유시간을 설정한다.
						[Label]: Precision
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="signature-infosType">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="signature-info" type="signature-infoType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지의 서명을 위한 설정이다. 복수 설정이 가능하다.
						[Label]: Signature Info
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="signature-infoType">
    <xs:sequence>
      <xs:element minOccurs="0" name="signatureParts" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지의 특정 부분을 서명하고자 할 때 설정한다.
                  "{}{http://schemas.xmlsoap.org/soap/envelope/}Body; Token"과 같은 방식으로 열거할 수 있다.
                   기본적으로 설정하지 않았을 경우에는 SOAP 바디 전체를 서명하게 된다.
						[Label]: SignatureParts
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="signatureAlgorithm" type="signatureAlgorithmType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 서명에 사용될 알고리즘을 명시한다.
                    SHA1withRSA,SHA1WithDSA,HMACSHA1 중의 하나를 사용한다.
						[Label]: SignatureAlgorithm
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="messageDigestAlogrithm" type="messageDigestAlgorithmType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: MessageDigest에 사용될 알고리즘을 명시한다.
                  SHA1를 사용한다.
						[Label]: MessageDigestAlogrithm
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="canonicalization" type="canonicalizationType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 사용될 canonicalization 방법을 명시한다.
                  Exclusive XML Canonicalization omit comments,
                  Exclusive XML Canonicalization with comments,
                  Inclusive XML Canonicalization omit comments, Inclusive XML Canonicalization with comments 중의 하나를 사용한다.
						[Label]: Canonicalization
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="keyIdentifier" type="sigKeyIdentifierType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 서명에 사용될 Key의 정보를 표현하는 방식이다.
                  IssuerSerial, DirectReference, SKIKeyIdentifier, X509KeyIdentifier 중의 하나를 사용한다.
						[Label]: KeyIdentifier
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="keystore" type="keystoreType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지의 서명을 위한 개인 Key를 저장하고 있는 Keystore의 설정이다.
						[Label]: Keystore
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="sigKeyIdentifierType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="IssuerSerial">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: X509 인증서의 발급 번호를 메시지에 포함하여 서명을 검증하기 위한 인증서를 지정한다.
						[Label]: IssuerSerial
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DirectReference">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: X509 인증서를 메시지에 포함하고 그것을 메시지 내부에서 참조하는 방식이다.
						[Label]: DirectReference
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SKIKeyIdentifier">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Subject Key Idenfication 방식이다. X509 인증서의 버전이 3 이상이어야 한다.
						[Label]: SKIKeyIdentifier
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="X509KeyIdentifier">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지에 X509 인증서를 포함하고 서명 검증을 위해 설정한다.
						[Label]: X509KeyIdentifier
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="signatureAlgorithmType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="http://www.w3.org/2000/09/xmldsig#dsa-sha1">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: DSS(DSAWithSHA1)
						[Label]: http://www.w3.org/2000/09/xmldsig#dsa-sha1
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/2000/09/xmldsig#rsa-sha1">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: RSAWithSHA1
						[Label]: http://www.w3.org/2000/09/xmldsig#rsa-sha1
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/2000/09/xmldsig#hmac-sha1">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: HMACSHA1
						[Label]: http://www.w3.org/2000/09/xmldsig#hmac-sha1
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="messageDigestAlgorithmType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="http://www.w3.org/2000/09/xmldsig#sha1">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: SHA1
						[Label]: http://www.w3.org/2000/09/xmldsig#sha1
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="canonicalizationType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="http://www.w3.org/2001/10/xml-exc-c14n#">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Exclusive XML Canonicalization omit comments
						[Label]: http://www.w3.org/2001/10/xml-exc-c14n#
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/2001/10/xml-exc-c14n#WithComments">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Exclusive XML Canonicalization with comments
						[Label]: http://www.w3.org/2001/10/xml-exc-c14n#WithComments
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/TR/2001/REC-xml-c14n-20010315">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Inclusive XML Canonicalization omit comments
						[Label]: http://www.w3.org/TR/2001/REC-xml-c14n-20010315
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Inclusive XML Canonicalization with comments
						[Label]: http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="encryption-infosType">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="encryption-info" type="encryption-infoType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 배치되는 웹 서비스 클라이언트를 위한 설정들을 표시한다.
						[Label]: Encryption Info
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="encryption-infoType">
    <xs:sequence>
      <xs:element minOccurs="0" name="encryptionParts" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 특정 부분을 암호화하기 위한 설정이다.
                  "{mode}{ns}{localname};{mode}{ns}{localname};…" 과 같은 형식이다. 기본 모드의 값은 "content"이다.
            [Example]:{Content}{http://example.org/payment}CreCard;{Element}{}UserName
						[Label]: EncryptionParts
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="keyTransportAlogrithm" type="keyTransportAlogrithmType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: MessageDigest에 사용될 알고리즘을 명시한다. RSA1.5 중의 하나를 사용한다.
						[Label]: KeyTransportAlogrithm
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="encryptionAlgorithm" type="encryptionAlgorithmType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 암호화에 사용하는 알고리즘이다.
                  AES_128, AES_256, TRIPLE_DES, AES_192를 지원한다.
						[Label]: EncryptionAlgorithm
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="encryptionUser" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 암호화에 사용되는 Key의 별칭이다.
						[Label]: EncryptionUser
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="keyIdentifier" type="encKeyIdentifierType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 암호화에 사용될 Key의 정보를 표현하는 방식이다.
                  IssuerSerial, DirectReference, SKIKeyIdentifier, X509KeyIdentifier EmbeddedKeyName 중의 하나를 사용한다.
						[Label]: KeyIdentifier
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="keystore" type="keystoreType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 암호화에 사용될 Key의 저장소에 대해 설정한다.
						[Label]: Keystore
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element minOccurs="0" name="embeddedKey" type="embeddedKeyType">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 웹 서비스와 웹 서비스 클라이언트가 공유하고 있는 Key를 설정한다. keyIdentifier가 EmbeddedKeyName으로 설정되어야 사용할 수 있다.
						[Label]: EmbeddedKey
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="encKeyIdentifierType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="IssuerSerial">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: X509 인증서의 발급 번호를 메시지에 포함하여 서명을 검증하기 위한 인증서를 지정한다.
						[Label]: IssuerSerial
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DirectReference">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: X509 인증서를 메시지에 포함하고 그것을 메시지 내부에서 참조하는 방식이다.
						[Label]: DirectReference
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SKIKeyIdentifier">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: Subject Key Idenfication 방식이다. X509 인증서의 버전이 3 이상이어야 한다.
						[Label]: SKIKeyIdentifier
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="X509KeyIdentifier">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 메시지에 암호화에 사용된 X509 인증서를 포함한다.
						[Label]: X509KeyIdentifier
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="EmbeddedKeyName">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: 웹 서비스와 웹 서비스 클라이언트가 공유하는 SessionKey를 사용할 때 사용한다. 
                  웹 서비스와 클라이언트는 Key의 이름만을 주고받음으로써 어떤 Key를 사용했는지를 알 수 있다.
						[Label]: EmbeddedKeyName
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="encryptionAlgorithmType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="http://www.w3.org/2001/04/xmlenc#tripledes-cbc">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: DESEDE-CBC
						[Label]: http://www.w3.org/2001/04/xmlenc#tripledes-cbc
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/2001/04/xmlenc#aes128-cbc">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: AES128-CBC
						[Label]: http://www.w3.org/2001/04/xmlenc#aes128-cbc
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/2001/04/xmlenc#aes192-cbc">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: AES192-CBC
						[Label]: http://www.w3.org/2001/04/xmlenc#aes192-cbc
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.w3.org/2001/04/xmlenc#aes256-cbc">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: AES256-CBC
						[Label]: http://www.w3.org/2001/04/xmlenc#aes256-cbc
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="http://www.tmaxsoft.com/xml/algorithms/xmlenc#seed-cbc">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: SEED-CBC
						[Label]: http://www.tmaxsoft.com/xml/algorithms/xmlenc#seed-cbc
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="keyTransportAlogrithmType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="http://www.w3.org/2001/04/xmlenc#rsa-1">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: RSA1.5
						[Label]: http://www.w3.org/2001/04/xmlenc#rsa-1
					]]></xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="embeddedKeyType">
    <xs:sequence>
      <xs:element name="embeddedKeyCallbackClass" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: SessionKey를 사용하려면 Key의 Byte 정보를 가지고 있는 Callback 클래스를 설정한다.
						[Label]: EmbeddedKeyCallbackClass
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="key-name" type="xs:string">
        <xs:annotation>
          <xs:documentation><![CDATA[
						[Description]: SessionKey의 이름을 설정한다.
						[Label]: Key Name
					]]></xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
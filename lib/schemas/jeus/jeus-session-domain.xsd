<?xml version="1.0" encoding="UTF-8" standalone="no"?><xs:schema xmlns="http://www.tmaxsoft.com/xml/ns/jeus" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus" version="8.0">

    <xs:include schemaLocation="jeus-common.xsd"/>
    <xs:complexType name="session-clusterType">
        <xs:sequence>
            <xs:element default="DEFAULT" minOccurs="1" name="cluster-mode" type="cluster-modeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
					    [Description]: JEUS에서 제공하는 두가지 세션 클러스터 모드 중 하나를 설정한다.
                        DEFAULT : 이름처럼 기본적으로 설정하는 모드로 서버 클러스터에 의존한 세션 클러스터를 제공한다.
                        서버 클러스터를 맺을 경우 해당 서버간 세션 클러스터를 지원하며 맺지 않을 경우 세션 클러스터가 사용되지 않는다.
                        DOMAIN_WIDE : 전체 도메인 단 하나의 스코프로 세션을 공유하는 세션 클러스터를 사용시 설정한다.
                        도메인내 모든 서버와 모든 어플리케이션 들의 세션이 공유 된다. 특정 서버에만 디플로이되는 어플리케이션간 세션을 공유할때 사용된다.
                        간단하고 직관적으로 구성을 가능하지만 디플로이 된 서버가 다운되었을 경우에 장애에 유연하지 못 할 수 있다
						[Label]: Cluster Mode
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element default="RUNTIME" minOccurs="0" name="session-manager-provider" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션 메니져의 프로바이더를 설정한다.
                        예약어 외 전체 패키지 이름을 사용해야 한다.( ex: jeus.servlet.sessionmanager.provider.JeusDistributedWebSessionManagerProvider )
                        예약어는 두가지를 제공한다.
                        JEUS : JEUS에서 기본적으로 제공하는 세션 매니져를 사용한다.
						RUNTIME : 다른 프로바이더가 존재할 경우 해당 프로바이더를 우선 사용한다. 없을 경우 JEUS 세션 매니져를 사용한다.
						[Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Session Manager Provider
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="exclude-das-in-cluster" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클러스터에 DAS를 제외한다.
                     DAS를 매니저의 역할로 사용하기 위해 세션 클러스터링의 역할을 제거한다.
                        이 옵션은 클러스터 모드와 관계 없이 모두 적용된다.
						[Label]: Exclude Das In Cluster
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" default="BASE64" name="sticky-encoding-rule" type="sticky-modeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Sticky encoding의 encoding rule을 지원한다. 현재 BASE64, RAW를 지원한다.
                        BASE64 : Base64를 사용한다
						RAW : encoding없이 doamin name / server name을 사용한다
						[Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Sticky Encoding Rule
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="common-cluster-config" type="session-cluster-configType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션 클러스터링에 대한 기본적인 설정이다.
                        각 클러스터링에 구체적인 설정을 하지 않을 경우 이 설정값이 적용된다.
                        DEFAULT : 서버 클러스터에 세션 클러스터 설정을 할 경우 이 설정은 무시되며, 각 서버 클러스터의 설정을 따른다.
                        DOMAIN_WIDE : 이 설정에 따라 세션 클러스터링이 동작한다.
                        SPECIFIC_SCOPE : specific-scope-clusters 설정을 하지 않을 경우 이 설정으로 세션 클러스터링이 동작하며 개별 설정을 할 경우 이 설정은 무시된다.
						[Label]: Common Cluster Config
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="specific-scope-clusters" type="specific-scope-clustersType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Label]: Specific Scope Clusters
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="properties" type="propertiesType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 도메인에 설정하는 세션관련 프로퍼티 설정이다.
                        모든 스코프의 세션 클러스터에 동일하게 적용된다.
                        만약 동일 프로퍼티 설정이 하부 특정 세션 클러스터에 존재할 경우 해당 설정이 사용되며, 이 설정은 무시된다.
						[Label]: properties
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:simpleType name="cluster-modeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="DEFAULT">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 디폴트 세션 클러스터를 사용할때 설정한다.
                        서버 클러스터를 맺을 경우 해당 서버들은 자동적으로 세션 클러스터를 제공 받는다.
                        서블릿 스펙에 의해 디플로이 되는 애플리케이션 스코프로 클러스터에 참여한 서버간 세션이 공유 된다.
                        요청 처리가 클러스터에 참여한 서버들에 애플리케이션 처리가 가능하기에 장애 상황에 유연하게 동작한다.
                        서버 클러스터를 맺지 않을 경우에는 세션 클러스터가 사용 되지 않는다.
						[Label]: DEFAULT
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="DOMAIN_WIDE">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 전체 도메인 단 하나의 스코프로 세션을 공유하는 세션 클러스터를 사용시 설정한다.
                        서버 클러스터를 무시하게 되며 도메인내 모든 서버와 모든 어플리케이션 들의 세션이 공유 된다.
                        특정 서버에만 디플로이 하고자 하는 애플리케이션들의 세션을 공유하고자 할때 사용된다.
                        간단하고 직관적으로 구성을 가능하지만 서버 장애시 세션은 공유될 수 있으나 애플리케이션 요청 처리 자체가 불가능할 수 있다
						[Label]: DOMAIN_WIDE
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="sticky-modeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="BASE64">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: BASE64로 Sticky 값을 인코딩하도록 설정한다
						[Label]: BASE64
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="RAW">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Sticky 값을 인코딩하지 않고 그대로 사용하도록 설정한다
						[Label]: RAW
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="specific-scope-clustersType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" name="specific-scope" type="specific-scope-clusterType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 특정 애플리케이션 들로 그룹들을 설정하고 해당 그룹 스코프로 세션을 공유 및 유지하고자 할 때 설정한다.
                            JEUS의 세션 클러스터링에서는 해당 그룹들을 독립적인 애플리케이션들로 간주하여 세션을 공유한다.
                            이러한 공유가 가능하기 위해서는 브라우져의 쿠키가 다른 그룹의 스코프와 독립적으로 운영되어야 한다.
                            그룹간 쿠키 패스는 고유한 값으로 설정 되어야 하며, 그룹 내 어플리케이션들은 해당 값으로 컨텍스트 패스 공통으로 적용해야 하는 제약사항이 존재한다.
                            스코프를 설정하고 해당 스코프 별로 클러스터 설정을 다르게 적용할 경우 설정한다.
                     [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Specific Scope
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="specific-scope-clusterType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
						[Description]: 설정한 스코프의 고유한 이름을 설정한다.
                                       이 이름은 도메인 내에서 유일해야 하며, 세션 클러스터를 구성할 때 고유한 식별자(ID)로 사용된다.
                                       해당 식별자를 각 어플리케이션에서 선택하여 그룹을 결정한다.
						[Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="session-cluster-config" type="session-cluster-configType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Label]: Session Cluster Config
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="jeus-login-managerType">
        <xs:sequence>
            <xs:element name="primary" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JEUS 로그인 매니저의 primary 서버를 설정한다.
                     [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Primary
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="secondary" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JEUS 로그인 매니저의 secondary 서버를 설정한다.
                     [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Secondary
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="session-cluster-configType">
        <xs:annotation>
            <xs:documentation><![CDATA[
				[Description]: 세션 클러스터링에 관한 설정이다.
                    Servlet/JSP에서 사용하는 HTTP 세션 클러스터링의 클러스터링을 위한 서비스이다.
                    세션 클러스터링에 참여하는 다른 서와 통신하여 장애가 발생한 경우에도 세션이 유지될 수 있도록 한다.
				[Label]: Session Cluster ConfigType
			]]></xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element minOccurs="0" name="jeus-login-manager" type="jeus-login-managerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: jeus-login-manager의 Primary 서버와 Secondary서버를 설정한다.
                        Cluster level에서 중복 로그인 방지를 위한 jeus-login-manager의 로그인 정보가 저장될 서버를 설정한다.
                        [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Jeus Login Manager
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="reserved-thread-num" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 분산식 세션 서버로 들어온 요청을 처리하기 위한 Thread Pool에 대해 부가적인 설정을 한다.
                        기본적으로 System Thread Pool(Threadpool.System)을 사용하지만 특별히 이 서비스를 위한 스레드를 미리 할당할 필요가 있을 경우에만 설정한다.
                        여기에 설정한 값은 다른 서비스 들과 합산했을 때 System Thread Pool의 최댓값을 넘지 않도록 해야 한다.
                        [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Reserved Thread Num
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="5000" minOccurs="0" name="connect-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 웹 엔진에 존재하는 세션 서버 간의 소켓 커넥션을
                            생성할 때 적용되는 Timeout값이다.
                            단위는 밀리 초 이다
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Connect Timeout
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="20000" minOccurs="0" name="read-timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 웹 엔진에 존재하는 세션 서버 간의 통신에 적용되는
                            Read Timeout값이다. 데이터를 보낸 후 응답을 설정한 시간만큼 기다리게 된다.
                            단위는 밀리 초 이다
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Read Timeout
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="true" minOccurs="0" name="allow-fail-back" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: fail-back 을 허용할지에 대한 설정이다
                        장애가 발생한 서버가 다시 기동될때 기존에 백업 했던 세션을 다시 전송 받을지 여부를 결정한다.
                        기동 되는 서버의 설정에 의해 동작이 결정된다.
						[Label]: Allow Fail Back
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="access" minOccurs="0" name="backup-level" type="backup-levelType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션 백업을 수행의 방식, 백업 여부에 대한 기준을 설정한다.
                        [Non-Dynamic]: 백업 레벨은 동적 변경이 불가능하다.
						[Label]: backup-level
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="50" minOccurs="0" name="backup-unit-size" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 내부적으로 백업을 수행할 세션 단위 갯수이다.
                            보통 1개의 세션 단위로 업데이트가 되지만 부하상황시 해당 여러개를 한번에 전송된다.
                            최대 함께 보낼 세션의 갯수를 설정한다. 내부적으로 네트워크 패켓 제한과 세션 사이즈가 고려되어야 한다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Backup Unit Size
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="20" minOccurs="0" name="backup-queue-size" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 네트워크가 불안정할 경우 백업 전송이 지연될수 있다.
                            해당 지연이 발생하더라도 일정하게 세션을 큐에 저장하고 서블릿을 수행한다.
                            큐가 가득찰 경우 워커들이 기다리게 되어서 자연스러운 플로우 컨트롤이 수행된다.
                            큐에는 백업 유닛 단위로 저장되어 backup-unit * backup-queue-size만큼의 세션이 저장될수 있다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Backup Queue Size
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="ignore-flow-control" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]:백업 큐가 가득 차더라도 서비스는 지속적으로 수행을 하고자 할때 설정한다.
                        해당 세션은 백업에 실패하였기에 장애 상황에 유실될 가능성은 존재 한다.
                        장애 상황 및 라우팅 튕김현상보다 서비스가 우선순위가 높을때 설정한다.
						[Label]: Ignore Flow Control
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="prevent-migration" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JEUS에서의 세션 유지 방식은 마이그레이션을 기본으로 동작한다.
                        장애 상황이나 부하상황에 의해 세션이 없던 서버로 요청이 전달 되었을 경우 해당 서버로 또다시 요청이 올것을 대비하여
                        세션에 대해 라우팅 정보의 오너쉽을 변경한후 응답을 보낸다.
                        하지만 해당 응답이 도착하기 전에 여러 서버로 동시에 요청을 전달하여 서비스를 수행하는 서블릿 스펙을 넘어서는 상황에서는
                        세션이 유실될 가능성이 존재한다.
                        해당 상황이 불가피하게 존재할때를 대비하여 마이그레이션을 하지 않는 방식을 제공한다.
                        설정을 사용할 경우 최초 세션이 생성된 곳으로 지속적으로 업데이트 방식으로 이뤄지게 되어 성능상에 많은 불이익이 존재한다.
						[Label]: Prevent Migration
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="600" minOccurs="0" name="failover-delay" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 웹 엔진에 장애가 발생하였을때 해당 엔진을 제외한 나머지 엔진에서
                            다시 클러스터링 연결을 맺을 Timeout 값이다. 즉 이는 장애 상황에서 해당 엔진의 복구를
                            기다리는 시간이다. 단위는 초이다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Failover Delay
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="600" minOccurs="0" name="restart-delay" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 웹 엔진을 정상적으로 다운 시켰을때 해당 엔진을 제외한 나머지 엔진에서
                            다시 클러스터링 연결을 맺는 Timeout이다. 이는 재기동이 다운의 가장 많은 케이스이기 때문에
                            해당 재기동에 대한 성능을 향상 시키기 위한 설정이다. 단위는 초이다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Restart Delay
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="passivation" type="passivationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 일정 시간이 지나거나 특정 조건에 충족 되었을 때 메모리에 유지하고 있던 세션을
                            파일에 유지하여 메모리 효율을 높이는 기능을 제공한다.
                            해당 작업은 기본적으로 애플리케이션 별로 수행되나 jeus-web-dd.xml, domain.xml속 서버설정 안의 <session-config><shared>의 설정에 따라서
                            true일 경우 서버별로 수행된다. 설정하지 않을 모든 세션을 메모리에 유지한다.
						[Label]: Passivation
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <default-element>false</default-element>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="properties" type="propertiesType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 세션 클러스터 스코프에 적용되는 프로퍼티 설정이다.
                        여기에 설정을 추가하게 되면 동일한 이름의 도메인단 프로퍼티는 무시하게 된다.
                        해당 클러스터에만 구체적으로 설정 할 경우 추가하면 된다.
						[Label]: properties
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:simpleType name="backup-levelType">
        <xs:annotation>
            <xs:documentation><![CDATA[
				[Description]: 사용된 세션을 Remote 웹 엔진 또는 로컬 파일 DB에 백업하기 전에
                        백업할 필요가 있는지를 확인하는 것이 필요하다. 이 설정은 백업의 필요성을 체크하는 기준을 정한다.
                        기본적으로 사용된 세션이 Invalidate되었을 경우 설정한 기준에 관계없이 백업한다.
				[Label]: Backup LevelType
			]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="access">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션을 Attribute 별로 업데이트하며 setAttribute/putValue/removeAttribute/removeValue/getAttribute/getValue 함수 를 통해
						               접근한 Attribute들만 update의 대상이 된다.
						[Label]: access
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="set">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 세션의 setAttribute/putValue/removeAttribute/removeValue 함수
                                     호출이 발생한 경우에만 업데이트된 것으로 간주하여 해당 세션 객체를 백업한다.
						[Label]: set
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="get">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 세션의 setAttribute/putValue/removeAttribute/removeValue/getAttribute/getValue 함수
                                    호출이 발생한 경우에만 업데이트된 것으로 간주하여 해당 세션 객체를 백업한다.
						[Label]: get
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="all">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 사용된 세션은 조건 없이 모두 백업한다.
                                    해당 세션 객체가 HttpServletRequest.getSession() API로 호출될 경우 업데이트된 것으로 간주하여 해당 세션 객체를 백업한다.
						[Label]: all
					]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="stick-routing-configType">
        <xs:sequence>
            <xs:element default="BASE64" minOccurs="0" name="encoding-rule" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Sticky encoding의 encoding rule을 지원한다. 현재 BASE64, RAW를 지원한다.
						[Label]: Encoding Rule
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="passivationType">
        <xs:sequence>
            <xs:element minOccurs="0" name="file-path" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션을 저장할 파일 경로을 지정한다(절대 경로).
                            파일 백업은 jeus-web-dd.xml, domain.xml속 서버설정 안의 <session-config><shared> 설정에 따라서 true일 경우 "$(SERVER_HOME)/.workspace/session/distributed/<server_name>"이고,
                            false 일 경우 "$(SERVER_HOME)/.workspace/session/distributed/<context_name>"로 설정된다.
                            [Non-Dynamic]: 기존 접근 파일의 내용을 참조하기 때문에 동적으로 변경할 수 없다.
						[Label]: File Path
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="trigger" type="passivationTriggerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: file passivation 을 수행하는 trigger들을 설정한다.
                            timeout, session count, session memory들을 제공한다
						[Label]: Trigger
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <default-element>false</default-element>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="10000" minOccurs="0" name="single-folder-file-limit" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션 하나당 파일을 하나씩 사용하게 된다. 하나의 폴더에 저장된 세션파일의 갯수를 제한한다.
                            너무 적은 수의 설정을 하게 되면 불필요한 폴더가 많이 생성될수 있으며 10000개 이상의 설정시 운영체제에 따라
                            파일 입출력상 성능의 저하가 있을수 있다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Single Folder File Limit
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="100" minOccurs="0" name="min-hole" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 일정시간 file-db를 운용하면 파일의 크기가 필요이상 커지게 된다.
                            이 설정에 지정된 횟수 만큼 파일 I/O가 발생하면 File Packing을 수행하여 필요이상
                            파일 크기가 늘어나는 것을 막는다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Min Hole
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="0.5" minOccurs="0" name="packing-rate" type="fractionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 일정시간 File DB를 운용하면 파일의 크기가 필요이상 커지게 된다.
                            현재 세션 객체 개수 대비 file I/O 횟수가 지정된 Ratio를 넘어서면 File Packing을 수행하여 필요이상
                            파일 크기가 늘어나는 것을 막는다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Packing Rate
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="0.7" minOccurs="0" name="ratio" type="fractionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션 개수 및 세션의 메모리로 패시베이션을 진행할 때 얼마나 많은 세션을 패시베이션 할지의 비율을 설정한다.
                            설정한 비율 만큼의 개수 또는 메모리양을 유지하도록 패시베이션을 수행한다.
                            타임아웃으로 인해 패시베이션을 수행할 때에는 적용되지 않는다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Ratio
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="passivationTriggerType">
        <xs:sequence>
            <xs:element default="-1" minOccurs="0" name="timeout" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메모리에 존재하는 세션 객체를 일정시간 사용하지 않으면 파일에 저장 하는 설정이다.
                            -1 또는 0 이면 파일로 패시베이션을 수행하지 않는다. 0보다 큰 시간을 설정하면
                            지정된 시간 이상 사용하지 않는 메모리의 세션 객체는 파일로 패시베이션된다.
                            단위는 밀리 초이며 기본값은 -1이다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="-1" minOccurs="0" name="count-threshold" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션이 일정 갯수 이상 메모리상에 존재할 경우 세션의 일부를 파일에 내리는 작업을 수행한다.
                            이 작업은 일정 주기마다 수행되는 모니터링 스레드에 의해 진행된다.
                            세션 갯수에 대한 설정이며 -1 또는 0일 경우 수행하지 않는다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Count Threshold
					]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element default="-1" minOccurs="0" name="memory-threshold" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 세션이 일정 메모리를 차지할 경우 세션의 일부를 파일에 내리는 작업을 수행한다.
                            이 작업은 일정 주기마다 수행되는 모니터링 스레드에 의해 진행된다.
                            직렬화를 수행 한 결과의 byte 단위의 설정이며 -1 또는 0일 경우 수행하지 않는다.
                            [Non-Dynamic]: 동적 변경이 불가능하다.
						[Label]: Memory Threshold
     				]]></xs:documentation>
                    <xs:appinfo>
                        <metadata>
                            <element-level>ADVANCED</element-level>
                        </metadata>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
</xs:schema>
<?xml version="1.0" encoding="UTF-8" standalone="no"?><xs:schema xmlns="http://www.tmaxsoft.com/xml/ns/jeus" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus" version="8.0">

    <xs:include schemaLocation="jeus-common.xsd"/>
    <xs:include schemaLocation="jeus-store.xsd"/>

    <xs:simpleType name="engine-rollType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="Active"/>
            <xs:enumeration value="Standby"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="jms-resourceType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="destination" type="destinationType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에 대한 정보를 지정한다.
                        [Dynamic]: Destination은 동적으로 추가 및 삭제가 가능하다.
						[Label]: Destination
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="unbounded" minOccurs="0" name="durable-subscriber" type="durable-subscriberType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Durable subscriber에 대한 정보를 지정한다.
                        [Non-Dynamic]: Durable subscriber는 동적으로 추가 및 삭제가 불가능하다.
						[Label]: Durable Subscriber
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jms-serverType">
        <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="1" name="service-config" type="jms-service-configType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메시징 서비스를 제공하기 위한 서비스 채널에 대한 설정이다. 최소한 하나 이상 설정되어야 한다.
                        [Dynamic]: 동적으로 추가할 수 있다.
						[Label]: Service Config
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element default="Active" maxOccurs="1" minOccurs="0" name="engine-roll" type="engine-rollType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 이 JMS Engine의 역할을 설정한다. Active와 Standby를 설정할 수 있으며, Active는 평상시에 기동되어
                        서비스를 하는 역할, Standby는 Active의 장애시에 기동되어 서비스를 이어받는 역할을 한다. 기본값은 Active이다.
						[Label]: Engine Roll
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element default="5" maxOccurs="1" minOccurs="0" name="failover-check-timeout" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 장애를 감지하고 Failover를 하기 전에 그 대상이 되는 JMS Engine의 생존 여부를 별도의 다른 수단을 통해
                        다시 한 번 확인하는데 사용할 시간을 설정한다. 이 시간은 한 번의 시도에 소모되는 시간이다. 단위는 초, 기본값은 5이다.
						[Label]: Failover Check Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" maxOccurs="1" minOccurs="0" name="failover-check-count" type="xs:int">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 장애를 감지하고 Failover를 하기 전에 그 대상이 되는 JMS Engine의 생존 여부를 별도의 다른 수단을 통해
                        다시 한 번 확인해볼 최대 횟수를 설정한다. 이 횟수만큼 시도를 했으나 생존 여부가 확인이 되지 않으면 실제로 장애가 발생했다고
                        판단하고 Failover를 시작한다. 기본값은 0으로 장애를 감지하면 즉시 Failover를 시작한다.
						[Label]: Failover Check Count
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element minOccurs="0" name="thread-pool" type="jms-thread-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]:JMS Engine가 사용하는 Thread pool에 대한 설정이다.
						[Label]: Thread Pool
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element maxOccurs="unbounded" minOccurs="0" name="connection-factory" type="connection-factoryType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: JMS Connection Factory에 대해서 설정한다.
                        [Dynamic]: JMS Connection Factory는 동적으로 추가 및 삭제가 가능하다.
						[Label]: Connection Factory
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element maxOccurs="1" minOccurs="0" name="persistence-store" type="jms-persistence-storeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Persistent object들을 위한 Store 정보를 설정한다.
                        Persistent Object에는 Destination, DurableSubscription, Message, Subscription, Transaction이 있다.
                        [Non-Dynamic]: Persistent Store 설정은 동적으로 변경할 수 없다.
						[Label]: Persistence Store
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element maxOccurs="unbounded" minOccurs="0" name="message-sort" type="message-sortType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination내에서 메시지를 정렬하기 위한 설정을 정의한다.
                        [Non-Dynamic]: 동적으로 변경할 수 없다.
						[Label]: Message Sort
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jms-journal-storeType">
        <xs:complexContent>
            <xs:extension base="journal-storeType">
                <xs:sequence>
                    <xs:element maxOccurs="1" minOccurs="0" name="destination-table" type="valuableToken">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
				                [Description]: Journal Store를 사용하도록 설정되었을 경우에도 Destination 정보는 Embedded DB에 저장한다.
                                이 때 사용할 테이블 이름을 설정한다.
				                [Label]: Destination Table
			                ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element maxOccurs="1" minOccurs="0" name="durable-subscription-table" type="valuableToken">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
				                [Description]: Journal Store를 사용하도록 설정되었을 경우에도 Durable Subscription 정보는 Embedded DB에
                                저장한다. 이 때 사용할 테이블 이름을 설정한다.
				                [Label]: Durable Subscription Table
			                ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="jms-jdbc-storeType">
        <xs:sequence>
            <xs:element maxOccurs="1" minOccurs="1" name="data-source" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: DB의 데이터소스를 설정한다.
						[Label]: Data Source
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="destination-table" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination 테이블 이름을 변경한다. (단, 영문 소문자 입력은 제한한다.)
						[Label]: Destination Table
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="durable-subscription-table" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Durable Subscription 테이블 이름을 변경한다. (단, 영문 소문자 입력은 제한한다.)
						[Label]: Durable Subscription Table
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="message-table" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메시지 테이블 이름을 변경한다. (단, 영문 소문자 입력은 제한한다.)
						[Label]: Message Table
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="subscription-message-table" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Subscription 테이블 이름을 변경한다. (단, 영문 소문자 입력은 제한한다.)
						[Label]: Subscription Message Table
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="transaction-table" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 트랜잭션 테이블 이름을 변경한다. (단, 영문 소문자 입력은 제한한다.)
						[Label]: Transaction Table
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jms-persistence-storeType">
        <xs:choice>
            <xs:element maxOccurs="1" minOccurs="0" name="none" type="emptyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Label]: None
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="journal" type="jms-journal-storeType">
				<xs:annotation>
					<xs:documentation><![CDATA[
						[Label]: Journal
					]]></xs:documentation>
				</xs:annotation>
			</xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="jdbc" type="jms-jdbc-storeType">
				<xs:annotation>
					<xs:documentation><![CDATA[
						[Label]: JDBC
					]]></xs:documentation>
				</xs:annotation>
			</xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="message-sortType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 메시지 정렬 설정의 이름이다. Queue나 Durable subscription 설정에 명시하면 이 설정이 적용된다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="key" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메시지 정렬을 위한 key 값이다. JMS 메시지 header의 "JMS"로 시작하는 Predefined 프로퍼티,
                        혹은 임의의 User 프로퍼티를 사용할 수 있다.
						[Label]: Key
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="type" type="key-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메시지 정렬을 위한 key 값의 타입을 설정한다. Predefined 프로퍼티에 대해서는 설정할 필요가 없다.
                        프로퍼티로 설정 가능한 타입들인 Boolean, Byte, Float, Integer, Double, String만 설정할 수 있고, 기본값은 String이다.
						[Label]: Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="direction" type="sort-directionType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 메시지 정렬을 위한 Direction값이다. Ascending(오름차순)이나 Descending(내림차순)을 사용할 수 있다.
						[Label]: Direction
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="key-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="Boolean"/>
            <xs:enumeration value="Byte"/>
            <xs:enumeration value="Float"/>
            <xs:enumeration value="Integer"/>
            <xs:enumeration value="Double"/>
            <xs:enumeration value="String"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="sort-directionType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="Ascending"/>
            <xs:enumeration value="Descending"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="jms-service-configType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 서비스 채널의 이름을 설정한다. Connection Factory에 채널 정보를 지정하기 위해 설정한다.
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:choice>
                <xs:element minOccurs="0" name="listener-name" type="valuableToken">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
							[Description]: 서비스 채널의 Listener를 지정한다. 서버에 이미 존재하는 설정들에 있는 이름을 설정한다.
                            설정하지 않으면 Base-listener가 선택된다.
							[Label]: Listener Name
						]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="virtual-listener" type="virtual-listenerType">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
							[Description]: Virtual Listener를 지정한다. 실제로 존재하지 않는 주소를 외부 환경의 필요에 따라 지정할 때 사용한다.
							[Label]: Virtual Listener
						]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
            <xs:element default="1000" minOccurs="0" name="client-limit" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서비스 채널이 허용하는 최대 클라이언트 수를 지정한다.
						[Label]: Client Limit
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="30" minOccurs="0" name="client-keepalive-timeout" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트와의 연결이 비정상 종료되었을 경우 재접속을 기다리는 시간이다. 설정한 시간이 지나면
                        해당 클라이언트의 리소스는 모두 서버에 반환된다. 설정된 시간 내에는 해당 클라이언트의 clientID 값이 유지되므로
                        네트워크 상태가 불량한 경우에만 설정한다.
                        초 단위로 설정하며 0 이하의 값을 지정하면 기다리지 않고 즉시 리소스를 반환한다.
						[Label]: Client Keepalive Timeout
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="virtual-listenerType">
        <xs:sequence>
            <xs:element name="server-address" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서비스 채널의 IP 주소를 설정한다. Connection Factory의 주소로 사용된다.
                        [Example]: 123.123.123.123
						[Label]: Server Address
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="port" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 서비스 채널의 TCP 포트 번호를 설정한다.
                        [Example]: 9741
						[Label]: Port
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="connection-factoryType">
        <xs:sequence>
            <xs:element default="nonxa" minOccurs="0" name="type" type="factory-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 Connection Factory의 종류를 설정한다.
                        [Non-Dynamic]:
						[Label]: Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: JMS 시스템 내에서 관리의 목적으로 사용되는 Connection Factory의 이름이다.
                        [Non-Dynamic]:
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 Connection Factory가 Naming Server에 바인딩되는 이름을 설정한다. 설정하지 않으면 Name 속성이 그대로 사용된다.
                        [Non-Dynamic]:
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element maxOccurs="1" minOccurs="0" name="service" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 Connection Factory가 연결을 시도할 서비스의 이름을 설정한다. Service Config에 지정된 이름을 사용한다.
                        이름을 지정하지 않을 경우 처음 설정된 서비스로 임의 지정된다.
                        [Non-Dynamic]:
						[Label]: Service
					]]></xs:documentation>
                </xs:annotation>
                <xs:unique name="factory-service-config-name">
                    <xs:selector xpath="xs:jms-server/service-config"/>
                    <xs:field xpath="name"/>
                </xs:unique>
            </xs:element>
            <xs:element minOccurs="0" name="client-id" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 Connection Factory를 이용하여 생성되는 커넥션에 기본값으로 설정되는 Client Id 값이다.
                        [Non-Dynamic]:
						[Label]: Client Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="Round-robin" minOccurs="0" name="server-selection-policy" type="server-selection-policyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: ConnectionFactory가 커넥션을 생성할 때 어떤 채널을 선택할지를 결정하는 정책이다. Round-robin, Random 중에 선택할 수 있다.
                        [Non-Dynamic]:
						[Label]: Server Selection Policy
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="200" minOccurs="0" name="request-blocking-time" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트에서 서버로 요청을 보낼 경우 응답이 올 때까지 기다리는 시간을 설정한다. 이 시간이 지나면
                                       클라이언트에 JMSException을 throw하며 Block이 해제된다. 단위는 초이며, 기본값은 200이다.
                        [Non-Dynamic]:
						[Label]: Request Blocking Time
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="reconnect-enabled" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트와 서버의 연결이 끊어질 경우 재연결 수행 여부를 설정한다.
                        [Non-Dynamic]:
						[Label]: Reconnect Enabled
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0" minOccurs="0" name="reconnect-period" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트와 서버의 연결이 끊어질 경우 재연결을 시도할 최대시간을 설정한다.
                                       설정한 시간 동안 재연결이 되지 않으면 모든 요청은 취소되고 JMSException을 throw한다.
                                       이 시간은 Request Blocking Time보다 항상 커야 한다. 작을 경우 Request Blocking Time으로
                                       대체된다.
                                       기본값은 0으로, 무한을 의미한다.
                        [Non-Dynamic]:
						[Label]: Reconnect Period
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="5" minOccurs="0" name="reconnect-interval" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트와 서버의 연결이 끊어질 경우 재연결을 시도할 때의 시간 간격을 설정한다. 단위는 초이며 기본값은 5이다.
                        [Non-Dynamic]:
						[Label]: Reconnect Interval
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="destination-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="queue"/>
            <xs:enumeration value="topic"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="factory-typeType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="nonxa"/>
            <xs:enumeration value="xa"/>
            <xs:enumeration value="queue"/>
            <xs:enumeration value="topic"/>
            <xs:enumeration value="xaqueue"/>
            <xs:enumeration value="xatopic"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="server-selection-policyType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="Round-robin"/>
            <xs:enumeration value="Random"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="destinationType">
        <xs:sequence>
            <xs:element name="type" type="destination-typeType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 Destination의 종류를 설정한다. Queue와 Topic 중 하나를 지정한다.
                        [Non-Dynamic]:
						[Label]: Type
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: JMS Engine 내에서 관리 목적으로 사용되는 Destination의 이름을 설정한다.
                        [Non-Dynamic]:
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="export-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination이 Naming Server에 바인딩되는 이름을 설정한다. 설정하지 않으면 Name 속성이 그대로 사용된다.
                        [Non-Dynamic]:
						[Label]: Export Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="1024" minOccurs="0" name="subscription-limit" type="positiveIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에 접근할 수 있는 Consumer의 수를 제한한다.
                        [Non-Dynamic]: TODO 추후에 변경 가능하도록 한다.
						[Label]: Subscription Limit
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="128M" minOccurs="0" name="quota" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 해당 Destination에서 사용할 수 있는 최대 메모리 크기를 설정한다.
                        사용 중인 메모리가 이 값을 초과하는 경우 클라이언트의 메시지 전달은 바로 에러 처리된다. 기본값은 128MBytes이다.
                        숫자 뒤에 'K'(KiloBytes), 'M'(MegaBytes), 'G'(GigaBytes)를 붙여 설정할 수 있다.
                        [Non-Dynamic]: TODO 추후에 변경 가능하도록 한다.
						[Label]: Quota
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="128" minOccurs="0" name="max-pending-limit" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Queue나 Topic에 MessageListener가 등록되어 있는 경우 Destination에
                        메시지가 도착한 직후 Consumer로 메시지가 보내지므로 클라이언트가 이 메시지들을 빨리 처리하지
                        않으면 클라이언트 메모리에 쌓이게 되어 OutOfMemory 에러가 발생할 수 있다.
                        DISPATCH는 되었지만 ACKNOWLEDGE를 수신하지 않은 메시지의 최대 허용범위를 지정하여 이런 문제를
                        방지할 수 있다.
                        [Non-Dynamic]: TODO 추후에 변경 가능하도록 한다.
						[Label]: Max Pending Limit
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="0.4" minOccurs="0" name="resume-dispatch-factor" type="xs:float">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Pending 메시지가 Max Pending Limit보다 크게 되면 메시지 전달은 일시적으로 중단된다.
                        클라이언트가 메시지를 완전히 처리한 후 ACKNOWLEDGE들을 보내어 Pending된 메시지의 수가
                        (Max Pending Limit * Resume Dispatch Factor) 작거나 같으면 dispatch는 다시 시작한다.
                        [Non-Dynamic]: TODO 추후에 변경 가능하도록 한다.
						[Label]: Resume Dispatch Factor
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="JEUSMQ_DLQ" minOccurs="0" name="dead-letter-destination" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에서 정상적으로 처리되지 못한 메시지들을 보관할 Destination의 이름이다.
                        기본값인 JEUSMQ_DLQ는 시스템에서 제공하는 Queue이며 따로 설정하지 않아도 자동으로 생성된다.
                        만약 설정된 Destination이 존재하지 않는다면 기본값으로 대체된다.
						[Label]: Dead Letter Destination
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="Delete" minOccurs="0" name="expiration-policy" type="expiration-policyType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에서 전달되지 못하고 만료된 메시지들을 처리할 방법을 설정한다.
                        (Delete: 만료된 메시지를 삭제, Redirect: 만료된 메시지를 dead-letter-destination으로 재전송)
                        기본값은 Delete이다.
                        [Non-Dynamic]:
						[Label]: Expiration Policy
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="redelivery-delay" type="positiveLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Transaction rollback 혹은 Recover된 메시지가 재전송되기까지의 지연시간을 설정한다.
                        단위는 초이다.
                        [Non-Dynamic]:
						[Label]: Redelivery Delay
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-sort" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에 적용할 메시지 sort 설정을 정의한다.
                        [Non-Dynamic]:
						[Label]: Message Sort
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-group" type="message-groupType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에 적용할 메시지 그룹 설정을 정의한다.
						[Label]: Message Group
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="override-client-attributes" type="override-client-attributesType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에 보내지는 메시지들에 한해서 클라이언트 프로그래밍에 의해서 설정되는 값들에 우선하여
                        이 설정값들을 적용시킨다.
                        [Non-Dynamic]:
						[Label]: Override Client Attributes
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="expiration-policyType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="Delete"/>
            <xs:enumeration value="Redirect"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="override-client-attributesType">
        <xs:sequence>
            <xs:element minOccurs="0" name="expiration-time" type="positiveLongType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: MessageProducer에 의해 정의된 timeToLive (expiration-time) 설정에 우선하여 이 값을 적용시킨다.
                        단위는 초이다.
                        [Non-Dynamic]:
						[Label]: Expiration Time
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="durable-subscriberType">
        <xs:sequence>
            <xs:element name="client-id" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 클라이언트를 식별하는 값을 설정한다.
                        Connection Factory 내에서 뿐만 아니라 Durable Subscriber 항목의 모든 Client Id 값들 중에서 중복 되어서는 안된다.
                        [Non-Dynamic]:
						[Label]: Client Id
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[ID]: ID
                        [Description]: 이 Durable Subscriber를 식별하는 값을 설정한다.
                        [Non-Dynamic]:
						[Label]: Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="false" minOccurs="0" name="shared" type="xs:boolean">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: 이 Durable Subscriber를 여러 클라이언트가 공유해서 사용할지 여부를 설정한다.
                        공유할 경우 하나의 메시지는 클라이언트 중 하나에만 전달된다.
                        자세한 내용은 Java Message Service 2.0 Specification 8.3.4 Shared Durable Subscription을 참조하도록 한다.
                        [Non-Dynamic]:
						[Label]: Shared
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="destination-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Durable Subscriber가 메시지를 받고자 하는 Destination의 이름을 설정한다.
                        [Non-Dynamic]:
						[Label]: Destination Name
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-selector" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Durable Subscriber의 Message selector를 설정한다.
                        [Non-Dynamic]:
						[Label]: Message Selector
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="message-sort" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Durable subscriber에 적용할 메시지 정렬 설정을 정의한다.
                        [Non-Dynamic]:
						[Label]: Message Sort
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jms-thread-poolType">
        <xs:sequence>
            <xs:element default="1" minOccurs="0" name="min" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Thread pool의 최소 크기를 지정한다.
						[Label]: Min
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="100" minOccurs="0" name="max" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Thread pool의 최대 크기를 지정한다.
						[Label]: Max
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="300" minOccurs="0" name="keep-alive-time" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: min 설정 개수를 초과하는 Thread들 중에서 여기에 지정된 시간 동안 사용되지 않은 것은 소멸된다.
                        단위는 초이며 기본값은 300이다.
						[Label]: Keep Alive Time
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="message-groupType">
        <xs:sequence>
            <xs:element default="Pass" minOccurs="0" name="message-handling" type="message-handlingType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination이 메시지 그룹을 어떻게 다룰 것인지 정의한다. Pass와 Gather를 설정할 수 있다.
                        Pass는 일반 메시지와 동일하게 취급한다. Gather는 메시지 그룹을 완성시켜서 하나의 메시지로 전달한다.
						[Label]: Message Handling
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element default="-1" minOccurs="0" name="expiration-time" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
						[Description]: Destination에 완성되지 않은 메시지 그룹이 최대 얼마 동안 존재할 수 있는지 초단위로 정의한다.
                        기본값은 -1로, 완성될 때까지 없어지지 않는다.
						[Label]: Expiration Time
					]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="message-handlingType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="Pass"/>
            <xs:enumeration value="Gather"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>